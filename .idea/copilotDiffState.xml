<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/admin/alerts-demo/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/alerts-demo/page.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;&#10;import { showAdminAlert, showBankNotificationAlert, showBankNotificationSummary } from &quot;@/components/common/notification-alert&quot;&#10;import { &#10;  Bell, &#10;  CheckCircle, &#10;  AlertTriangle, &#10;  Info, &#10;  XCircle, &#10;  CreditCard, &#10;  ArrowUpRight, &#10;  ArrowDownLeft,&#10;  DollarSign,&#10;  Users,&#10;  Settings&#10;} from &quot;lucide-react&quot;&#10;&#10;export default function AdminAlertsDemo() {&#10;  // Basic admin alerts&#10;  const showSuccessAlert = () =&gt; {&#10;    showAdminAlert.success(&quot;Operation completed successfully!&quot;)&#10;  }&#10;&#10;  const showErrorAlert = () =&gt; {&#10;    showAdminAlert.error(&quot;Something went wrong. Please try again.&quot;)&#10;  }&#10;&#10;  const showWarningAlert = () =&gt; {&#10;    showAdminAlert.warning(&quot;This action requires administrator approval.&quot;)&#10;  }&#10;&#10;  const showInfoAlert = () =&gt; {&#10;    showAdminAlert.info(&quot;System maintenance scheduled for tonight at 2:00 AM.&quot;)&#10;  }&#10;&#10;  // Banking transaction alerts&#10;  const showTransactionCreated = () =&gt; {&#10;    showAdminAlert.transaction.created(&quot;$1,250.00&quot;, &quot;John Doe&quot;)&#10;  }&#10;&#10;  const showTransactionReceived = () =&gt; {&#10;    showAdminAlert.transaction.received(&quot;$850.75&quot;, &quot;Jane Smith&quot;)&#10;  }&#10;&#10;  const showTransactionFailed = () =&gt; {&#10;    showAdminAlert.transaction.failed(&quot;Insufficient funds&quot;)&#10;  }&#10;&#10;  // Account management alerts&#10;  const showAccountCreated = () =&gt; {&#10;    showAdminAlert.account.created(&quot;ACC-2024-001234&quot;)&#10;  }&#10;&#10;  const showAccountUpdated = () =&gt; {&#10;    showAdminAlert.account.updated(&quot;ACC-2024-001234&quot;)&#10;  }&#10;&#10;  const showAccountBlocked = () =&gt; {&#10;    showAdminAlert.account.blocked(&quot;ACC-2024-001234&quot;)&#10;  }&#10;&#10;  // Notification-specific alerts&#10;  const showNotificationAlert = () =&gt; {&#10;    const mockNotification = {&#10;      id: &quot;demo-001&quot;,&#10;      title: &quot;Transfer Completed&quot;,&#10;      message: &quot;You have successfully sent $500.00 to Alice Johnson&quot;,&#10;      type: &quot;success&quot; as const,&#10;      isRead: false,&#10;      timestamp: new Date().toISOString()&#10;    }&#10;    showBankNotificationAlert(mockNotification)&#10;  }&#10;&#10;  const showBulkMarkRead = () =&gt; {&#10;    showBankNotificationSummary(5, 'markRead')&#10;  }&#10;&#10;  const showNewNotifications = () =&gt; {&#10;    showBankNotificationSummary(3, 'newNotifications')&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-6 p-6&quot;&gt;&#10;      &lt;div className=&quot;space-y-2&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold&quot;&gt;Admin Alert System Demo&lt;/h1&gt;&#10;        &lt;p className=&quot;text-muted-foreground&quot;&gt;&#10;          Test all the bank-style notification alerts available in your admin panel&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid gap-6 md:grid-cols-2 lg:grid-cols-3&quot;&gt;&#10;        {/* Basic Admin Alerts */}&#10;        &lt;Card&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Settings className=&quot;h-5 w-5&quot; /&gt;&#10;              Basic Admin Alerts&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Standard administrative notification alerts&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-3&quot;&gt;&#10;            &lt;Button &#10;              onClick={showSuccessAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;CheckCircle className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Success Alert&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showErrorAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;XCircle className=&quot;mr-2 h-4 w-4 text-red-500&quot; /&gt;&#10;              Error Alert&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showWarningAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;AlertTriangle className=&quot;mr-2 h-4 w-4 text-yellow-500&quot; /&gt;&#10;              Warning Alert&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showInfoAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;Info className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;              Info Alert&#10;            &lt;/Button&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Banking Transaction Alerts */}&#10;        &lt;Card&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;DollarSign className=&quot;h-5 w-5&quot; /&gt;&#10;              Transaction Alerts&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Banking transaction-specific notifications&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-3&quot;&gt;&#10;            &lt;Button &#10;              onClick={showTransactionCreated} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;ArrowUpRight className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Transaction Sent&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showTransactionReceived} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;ArrowDownLeft className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Payment Received&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showTransactionFailed} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;XCircle className=&quot;mr-2 h-4 w-4 text-red-500&quot; /&gt;&#10;              Transaction Failed&#10;            &lt;/Button&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Account Management Alerts */}&#10;        &lt;Card&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Users className=&quot;h-5 w-5&quot; /&gt;&#10;              Account Management&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Account-related administrative alerts&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-3&quot;&gt;&#10;            &lt;Button &#10;              onClick={showAccountCreated} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;CheckCircle className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Account Created&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showAccountUpdated} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;Info className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;              Account Updated&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showAccountBlocked} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;AlertTriangle className=&quot;mr-2 h-4 w-4 text-red-500&quot; /&gt;&#10;              Account Blocked&#10;            &lt;/Button&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Notification System Alerts */}&#10;        &lt;Card className=&quot;md:col-span-2 lg:col-span-3&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Bell className=&quot;h-5 w-5&quot; /&gt;&#10;              Notification System Alerts&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Real-time notification alerts and summaries&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent&gt;&#10;            &lt;div className=&quot;grid gap-3 md:grid-cols-3&quot;&gt;&#10;              &lt;Button &#10;                onClick={showNotificationAlert} &#10;                className=&quot;w-full&quot;&#10;                variant=&quot;outline&quot;&#10;              &gt;&#10;                &lt;CreditCard className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;                Bank Notification&#10;              &lt;/Button&gt;&#10;              &lt;Button &#10;                onClick={showBulkMarkRead} &#10;                className=&quot;w-full&quot;&#10;                variant=&quot;outline&quot;&#10;              &gt;&#10;                &lt;CheckCircle className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;                Bulk Mark Read&#10;              &lt;/Button&gt;&#10;              &lt;Button &#10;                onClick={showNewNotifications} &#10;                className=&quot;w-full&quot;&#10;                variant=&quot;outline&quot;&#10;              &gt;&#10;                &lt;Bell className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;                New Notifications&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Usage Examples */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;How to Use in Your Code&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;&#10;            Import and use these alerts in any admin component&#10;          &lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent&gt;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;rounded-lg bg-muted p-4&quot;&gt;&#10;              &lt;p className=&quot;font-mono text-sm&quot;&gt;&#10;                &lt;span className=&quot;text-blue-600&quot;&gt;import&lt;/span&gt; {`{ showAdminAlert }`} &lt;span className=&quot;text-blue-600&quot;&gt;from&lt;/span&gt; &lt;span className=&quot;text-green-600&quot;&gt;&quot;@/components/common/notification-alert&quot;&lt;/span&gt;&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;              &lt;p&gt;&lt;strong&gt;Basic alerts:&lt;/strong&gt;&lt;/p&gt;&#10;              &lt;ul className=&quot;ml-4 space-y-1 font-mono text-xs&quot;&gt;&#10;                &lt;li&gt;• showAdminAlert.success(&quot;Message&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.error(&quot;Message&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.warning(&quot;Message&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.info(&quot;Message&quot;)&lt;/li&gt;&#10;              &lt;/ul&gt;&#10;              &lt;p&gt;&lt;strong&gt;Transaction alerts:&lt;/strong&gt;&lt;/p&gt;&#10;              &lt;ul className=&quot;ml-4 space-y-1 font-mono text-xs&quot;&gt;&#10;                &lt;li&gt;• showAdminAlert.transaction.created(&quot;$100&quot;, &quot;John&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.transaction.received(&quot;$50&quot;, &quot;Jane&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.transaction.failed(&quot;Reason&quot;)&lt;/li&gt;&#10;              &lt;/ul&gt;&#10;              &lt;p&gt;&lt;strong&gt;Account alerts:&lt;/strong&gt;&lt;/p&gt;&#10;              &lt;ul className=&quot;ml-4 space-y-1 font-mono text-xs&quot;&gt;&#10;                &lt;li&gt;• showAdminAlert.account.created(&quot;ACC-123&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.account.updated(&quot;ACC-123&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.account.blocked(&quot;ACC-123&quot;)&lt;/li&gt;&#10;              &lt;/ul&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/accounts/[accountNumber]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/accounts/[accountNumber]/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/[id]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/[id]/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/[id]/status/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/[id]/status/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/Notification/NotificationItem.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/Notification/NotificationItem.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Badge } from &quot;@/components/ui/badge&quot;&#10;import { Check, Trash2, AlertCircle, CheckCircle, Info, AlertTriangle } from &quot;lucide-react&quot;&#10;import {&#10;  Popover,&#10;  PopoverContent,&#10;  PopoverTrigger,&#10;} from &quot;@/components/ui/popover&quot;&#10;import { formatRelativeTime } from &quot;@/utils/format&quot;&#10;import type { Notification, NotificationActions } from &quot;@/types/notification&quot;&#10;&#10;const typeConfig = {&#10;  info: {&#10;    colors: &quot;bg-gradient-to-r from-pink-50 to-pink-25 text-pink-700 border-pink-200/50&quot;,&#10;    icon: Info,&#10;    iconBg: &quot;bg-gradient-to-br from-pink-500 to-pink-600&quot;,&#10;  },&#10;  success: {&#10;    colors: &quot;bg-gradient-to-r from-emerald-50 to-emerald-25 text-emerald-700 border-emerald-200/50&quot;,&#10;    icon: CheckCircle,&#10;    iconBg: &quot;bg-gradient-to-br from-emerald-500 to-emerald-600&quot;,&#10;  },&#10;  warning: {&#10;    colors: &quot;bg-gradient-to-r from-orange-50 to-orange-25 text-orange-700 border-orange-200/50&quot;,&#10;    icon: AlertTriangle,&#10;    iconBg: &quot;bg-gradient-to-br from-orange-500 to-orange-600&quot;,&#10;  },&#10;  error: {&#10;    colors: &quot;bg-gradient-to-r from-red-50 to-red-25 text-red-700 border-red-200/50&quot;,&#10;    icon: AlertCircle,&#10;    iconBg: &quot;bg-gradient-to-br from-red-500 to-red-600&quot;,&#10;  },&#10;}&#10;&#10;interface NotificationItemProps {&#10;  notification: Notification&#10;  actions: NotificationActions&#10;  isFirst?: boolean&#10;}&#10;&#10;export function NotificationItem({ notification, actions, isFirst = false }: NotificationItemProps) {&#10;  const config = typeConfig[notification.type] || typeConfig.info // Fallback to 'info' if type is undefined&#10;  const IconComponent = config.icon&#10;&#10;  return (&#10;    &lt;Card&#10;      className={`group transition-all duration-300 hover:shadow-lg hover:-translate-y-0.5 rounded-2xl border-0 shadow-sm ${&#10;        !notification.isRead&#10;          ? &quot;bg-gradient-to-r from-pink-50 to-pink-25 dark:from-pink-950/20 dark:to-pink-900/10 ring-2 ring-pink-200/50 shadow-pink-100/50&quot;&#10;          : &quot;bg-white dark:bg-gray-900 hover:shadow-gray-200/50 dark:hover:shadow-gray-800/50&quot;&#10;      } ${isFirst &amp;&amp; !notification.isRead ? &quot;animate-pulse&quot; : &quot;&quot;}`}&#10;    &gt;&#10;      &lt;CardContent className=&quot;p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-start justify-between gap-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-start gap-4 flex-1&quot;&gt;&#10;            &lt;div&#10;              className={`p-3 rounded-xl shadow-sm transition-all duration-200 ${&#10;                !notification.isRead&#10;                  ? `${config.iconBg} text-white shadow-lg`&#10;                  : &quot;bg-gray-100 dark:bg-gray-800 text-muted-foreground group-hover:bg-gray-200 dark:group-hover:bg-gray-700&quot;&#10;              }`}&#10;            &gt;&#10;              &lt;IconComponent className=&quot;h-5 w-5&quot; /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;              &lt;div className=&quot;flex items-center gap-3 mb-2&quot;&gt;&#10;                &lt;h3&#10;                  className={`font-semibold text-base leading-tight ${&#10;                    !notification.isRead ? &quot;text-gray-900 dark:text-white&quot; : &quot;text-muted-foreground&quot;&#10;                  }`}&#10;                &gt;&#10;                  {notification.title}&#10;                &lt;/h3&gt;&#10;&#10;                &lt;Badge&#10;                  variant=&quot;outline&quot;&#10;                  className={`${config.colors} font-medium px-2 py-1 text-xs rounded-lg shadow-sm`}&#10;                &gt;&#10;                  {notification.type}&#10;                &lt;/Badge&gt;&#10;&#10;                {!notification.isRead &amp;&amp; (&#10;                  &lt;div className=&quot;w-3 h-3 bg-gradient-to-r from-pink-500 to-pink-600 rounded-full animate-pulse shadow-sm&quot; /&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;&#10;              &lt;p className=&quot;text-sm text-muted-foreground mb-3 leading-relaxed&quot;&gt;{notification.message}&lt;/p&gt;&#10;&#10;              &lt;p className=&quot;text-xs font-medium text-muted-foreground bg-gray-50 dark:bg-gray-800 px-2 py-1 rounded-lg inline-block&quot;&gt;&#10;                {formatRelativeTime(notification.timestamp)}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-all duration-200&quot;&gt;&#10;            {!notification.isRead &amp;&amp; (&#10;              &lt;Button&#10;                variant=&quot;ghost&quot;&#10;                size=&quot;sm&quot;&#10;                onClick={() =&gt; actions.markAsRead(notification.id, true)}&#10;                className=&quot;hover:bg-emerald-50 hover:text-emerald-600 dark:hover:bg-emerald-950/20 rounded-xl transition-all duration-200 shadow-sm hover:shadow-md&quot;&#10;              &gt;&#10;                &lt;Check className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;/Button&gt;&#10;            )}&#10;&#10;            &lt;Popover&gt;&#10;              &lt;PopoverTrigger asChild&gt;&#10;                &lt;Button&#10;                  variant=&quot;ghost&quot;&#10;                  size=&quot;sm&quot;&#10;                  className=&quot;hover:bg-red-50 hover:text-red-600 dark:hover:bg-red-950/20 rounded-xl transition-all duration-200 shadow-sm hover:shadow-md&quot;&#10;                &gt;&#10;                  &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;/Button&gt;&#10;              &lt;/PopoverTrigger&gt;&#10;              &lt;PopoverContent className=&quot;w-72 p-4 rounded-lg shadow-md bg-white dark:bg-gray-900 border&quot;&gt;&#10;                &lt;div className=&quot;flex flex-col gap-2&quot;&gt;&#10;                  &lt;h4 className=&quot;text-sm font-semibold text-gray-900 dark:text-white&quot;&gt;&#10;                    Delete Notification&#10;                  &lt;/h4&gt;&#10;                  &lt;p className=&quot;text-sm text-gray-700 dark:text-gray-300&quot;&gt;&#10;                    Are you sure you want to delete this notification? This action cannot be undone.&#10;                  &lt;/p&gt;&#10;                  &lt;div className=&quot;flex justify-end gap-2&quot;&gt;&#10;                    &lt;Button&#10;                      variant=&quot;outline&quot;&#10;                      onClick={() =&gt; actions.remove(notification.id)}&#10;                      className=&quot;bg-red-500 text-white hover:bg-red-600 transition-all duration-200&quot;&#10;                    &gt;&#10;                      Delete&#10;                    &lt;/Button&gt;&#10;                    &lt;Button variant=&quot;outline&quot; className=&quot;text-gray-500 hover:text-gray-700&quot;&gt;&#10;                      Cancel&#10;                    &lt;/Button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/PopoverContent&gt;&#10;            &lt;/Popover&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import React, { useState } from &quot;react&quot;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Badge } from &quot;@/components/ui/badge&quot;&#10;import { Check, Trash2, AlertCircle, CheckCircle, Info, AlertTriangle } from &quot;lucide-react&quot;&#10;import {&#10;  AlertDialog,&#10;  AlertDialogAction,&#10;  AlertDialogCancel,&#10;  AlertDialogContent,&#10;  AlertDialogDescription,&#10;  AlertDialogHeader,&#10;  AlertDialogTitle,&#10;  AlertDialogTrigger,&#10;} from &quot;@/components/ui/alert-dialog&quot;&#10;import { formatRelativeTime } from &quot;@/utils/format&quot;&#10;import type { Notification, NotificationActions } from &quot;@/types/notification&quot;&#10;&#10;const typeConfig = {&#10;  info: {&#10;    colors: &quot;bg-gradient-to-r from-pink-50 to-pink-25 text-pink-700 border-pink-200/50&quot;,&#10;    icon: Info,&#10;    iconBg: &quot;bg-gradient-to-br from-pink-500 to-pink-600&quot;,&#10;  },&#10;  success: {&#10;    colors: &quot;bg-gradient-to-r from-emerald-50 to-emerald-25 text-emerald-700 border-emerald-200/50&quot;,&#10;    icon: CheckCircle,&#10;    iconBg: &quot;bg-gradient-to-br from-emerald-500 to-emerald-600&quot;,&#10;  },&#10;  warning: {&#10;    colors: &quot;bg-gradient-to-r from-orange-50 to-orange-25 text-orange-700 border-orange-200/50&quot;,&#10;    icon: AlertTriangle,&#10;    iconBg: &quot;bg-gradient-to-br from-orange-500 to-orange-600&quot;,&#10;  },&#10;  error: {&#10;    colors: &quot;bg-gradient-to-r from-red-50 to-red-25 text-red-700 border-red-200/50&quot;,&#10;    icon: AlertCircle,&#10;    iconBg: &quot;bg-gradient-to-br from-red-500 to-red-600&quot;,&#10;  },&#10;}&#10;&#10;interface NotificationItemProps {&#10;  notification: Notification&#10;  actions: NotificationActions&#10;  isFirst?: boolean&#10;}&#10;&#10;export function NotificationItem({ notification, actions, isFirst = false }: NotificationItemProps) {&#10;  const config = typeConfig[notification.type] || typeConfig.info&#10;  const IconComponent = config.icon&#10;  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)&#10;&#10;  const handleDeleteConfirm = () =&gt; {&#10;    actions.remove(notification.id)&#10;    setDeleteDialogOpen(false)&#10;  }&#10;&#10;  const handleDeleteCancel = () =&gt; {&#10;    setDeleteDialogOpen(false)&#10;  }&#10;&#10;  return (&#10;    &lt;Card&#10;      className={`group transition-all duration-300 hover:shadow-lg hover:-translate-y-0.5 rounded-2xl border-0 shadow-sm ${&#10;        !notification.isRead&#10;          ? &quot;bg-gradient-to-r from-pink-50 to-pink-25 dark:from-pink-950/20 dark:to-pink-900/10 ring-2 ring-pink-200/50 shadow-pink-100/50&quot;&#10;          : &quot;bg-white dark:bg-gray-900 hover:shadow-gray-200/50 dark:hover:shadow-gray-800/50&quot;&#10;      } ${isFirst &amp;&amp; !notification.isRead ? &quot;animate-pulse&quot; : &quot;&quot;}`}&#10;    &gt;&#10;      &lt;CardContent className=&quot;p-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-start justify-between gap-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-start gap-4 flex-1&quot;&gt;&#10;            &lt;div&#10;              className={`p-3 rounded-xl shadow-sm transition-all duration-200 ${&#10;                !notification.isRead&#10;                  ? `${config.iconBg} text-white shadow-lg`&#10;                  : &quot;bg-gray-100 dark:bg-gray-800 text-muted-foreground group-hover:bg-gray-200 dark:group-hover:bg-gray-700&quot;&#10;              }`}&#10;            &gt;&#10;              &lt;IconComponent className=&quot;h-5 w-5&quot; /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;              &lt;div className=&quot;flex items-center gap-3 mb-2&quot;&gt;&#10;                &lt;h3&#10;                  className={`font-semibold text-base leading-tight ${&#10;                    !notification.isRead ? &quot;text-gray-900 dark:text-white&quot; : &quot;text-muted-foreground&quot;&#10;                  }`}&#10;                &gt;&#10;                  {notification.title}&#10;                &lt;/h3&gt;&#10;&#10;                &lt;Badge&#10;                  variant=&quot;outline&quot;&#10;                  className={`${config.colors} font-medium px-2 py-1 text-xs rounded-lg shadow-sm`}&#10;                &gt;&#10;                  {notification.type}&#10;                &lt;/Badge&gt;&#10;&#10;                {!notification.isRead &amp;&amp; (&#10;                  &lt;div className=&quot;w-3 h-3 bg-gradient-to-r from-pink-500 to-pink-600 rounded-full animate-pulse shadow-sm&quot; /&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;&#10;              &lt;p className=&quot;text-sm text-muted-foreground mb-3 leading-relaxed&quot;&gt;{notification.message}&lt;/p&gt;&#10;&#10;              &lt;p className=&quot;text-xs font-medium text-muted-foreground bg-gray-50 dark:bg-gray-800 px-2 py-1 rounded-lg inline-block&quot;&gt;&#10;                {formatRelativeTime(notification.timestamp)}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center gap-2 opacity-0 group-hover:opacity-100 transition-all duration-200&quot;&gt;&#10;            {!notification.isRead &amp;&amp; (&#10;              &lt;Button&#10;                variant=&quot;ghost&quot;&#10;                size=&quot;sm&quot;&#10;                onClick={() =&gt; actions.markAsRead(notification.id, true)}&#10;                className=&quot;hover:bg-emerald-50 hover:text-emerald-600 dark:hover:bg-emerald-950/20 rounded-xl transition-all duration-200 shadow-sm hover:shadow-md&quot;&#10;              &gt;&#10;                &lt;Check className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;/Button&gt;&#10;            )}&#10;&#10;            &lt;AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}&gt;&#10;              &lt;AlertDialogTrigger asChild&gt;&#10;                &lt;Button&#10;                  variant=&quot;ghost&quot;&#10;                  size=&quot;sm&quot;&#10;                  className=&quot;hover:bg-red-50 hover:text-red-600 dark:hover:bg-red-950/20 rounded-xl transition-all duration-200 shadow-sm hover:shadow-md&quot;&#10;                &gt;&#10;                  &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;/Button&gt;&#10;              &lt;/AlertDialogTrigger&gt;&#10;              &lt;AlertDialogContent className=&quot;sm:max-w-[425px]&quot;&gt;&#10;                &lt;AlertDialogHeader&gt;&#10;                  &lt;AlertDialogTitle className=&quot;text-lg font-semibold&quot;&gt;&#10;                    Delete Notification&#10;                  &lt;/AlertDialogTitle&gt;&#10;                  &lt;AlertDialogDescription className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                    Are you sure you want to delete this notification? This action cannot be undone.&#10;                  &lt;/AlertDialogDescription&gt;&#10;                &lt;/AlertDialogHeader&gt;&#10;&#10;                &lt;div className=&quot;flex justify-end gap-2&quot;&gt;&#10;                  &lt;AlertDialogCancel asChild&gt;&#10;                    &lt;Button &#10;                      variant=&quot;outline&quot; &#10;                      onClick={handleDeleteCancel}&#10;                      className=&quot;h-10 px-4 rounded-md&quot;&#10;                    &gt;&#10;                      Cancel&#10;                    &lt;/Button&gt;&#10;                  &lt;/AlertDialogCancel&gt;&#10;                  &lt;AlertDialogAction asChild&gt;&#10;                    &lt;Button&#10;                      variant=&quot;destructive&quot;&#10;                      onClick={handleDeleteConfirm}&#10;                      className=&quot;h-10 px-4 rounded-md&quot;&#10;                    &gt;&#10;                      Delete&#10;                    &lt;/Button&gt;&#10;                  &lt;/AlertDialogAction&gt;&#10;                &lt;/div&gt;&#10;              &lt;/AlertDialogContent&gt;&#10;            &lt;/AlertDialog&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/common/admin-notification-handler.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/common/admin-notification-handler.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import { useEffect } from &quot;react&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import { showBankNotificationAlert } from &quot;./notification-alert&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;export const AdminNotificationHandler = () =&gt; {&#10;  useEffect(() =&gt; {&#10;    console.log('Admin notification handler initialized')&#10;    const wsService = new WebSocketService()&#10;&#10;    // Set up WebSocket event handlers for admin pages only&#10;    wsService.onNotification((notification: Notification) =&gt; {&#10;      console.log('Admin: New notification received', notification)&#10;      // Show bank-style alert for new notification in admin&#10;      showBankNotificationAlert(notification)&#10;    })&#10;&#10;    // Handle connection status&#10;    wsService.onConnect(() =&gt; {&#10;      console.log('Admin: Connected to WebSocket for notifications')&#10;    })&#10;&#10;    wsService.onDisconnect(() =&gt; {&#10;      console.log('Admin: Disconnected from WebSocket')&#10;    })&#10;&#10;    // Connect to WebSocket&#10;    wsService.connect()&#10;&#10;    return () =&gt; {&#10;      console.log('Admin notification handler cleanup')&#10;      wsService.disconnect()&#10;    }&#10;  }, [])&#10;&#10;  // This component doesn't render anything visible&#10;  return null&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { useEffect } from &quot;react&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import { showBankNotificationAlert, showBankNotificationSummary } from &quot;./notification-alert&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;export const AdminNotificationHandler = () =&gt; {&#10;  useEffect(() =&gt; {&#10;    console.log('Admin notification handler initialized')&#10;    &#10;    // Create a single WebSocket connection for admin&#10;    const wsService = new WebSocketService()&#10;&#10;    // Set up WebSocket event handlers for admin pages&#10;    wsService.onNotification((notification: Notification) =&gt; {&#10;      console.log('Admin: New notification received', notification)&#10;      &#10;      // Show bank-style alert for new notification in admin&#10;      showBankNotificationAlert(notification)&#10;      &#10;      // Also show the &quot;new notifications&quot; summary&#10;      showBankNotificationSummary(1, 'newNotifications')&#10;    })&#10;&#10;    // Handle connection status&#10;    wsService.onConnect(() =&gt; {&#10;      console.log('Admin: Connected to WebSocket for notifications')&#10;    })&#10;&#10;    wsService.onDisconnect(() =&gt; {&#10;      console.log('Admin: Disconnected from WebSocket')&#10;    })&#10;&#10;    // Connect to WebSocket&#10;    wsService.connect()&#10;&#10;    return () =&gt; {&#10;      console.log('Admin notification handler cleanup')&#10;      wsService.disconnect()&#10;    }&#10;  }, [])&#10;&#10;  // This component doesn't render anything visible&#10;  return null&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/common/notification-alert.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/common/notification-alert.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import React from &quot;react&quot;&#10;import { Bell, CheckCircle, AlertTriangle, Info, XCircle, CreditCard, ArrowUpRight, ArrowDownLeft } from &quot;lucide-react&quot;&#10;import { useToast } from &quot;@/hooks/use-toast&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;// Bank-style notification icons based on type and content&#10;const getNotificationIcon = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;&#10;  // Check for banking-specific keywords&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return &lt;ArrowUpRight className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return &lt;ArrowDownLeft className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return &lt;CreditCard className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;&#10;  // Fallback to type-based icons&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;    case &quot;warning&quot;:&#10;      return &lt;AlertTriangle className=&quot;h-5 w-5 text-yellow-500&quot; /&gt;&#10;    case &quot;error&quot;:&#10;      return &lt;XCircle className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;    default:&#10;      return &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;}&#10;&#10;// Get notification styling based on type&#10;const getNotificationStyle = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;    }&#10;  }&#10;&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;      }&#10;    case &quot;warning&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;&#10;      }&#10;    case &quot;error&quot;:&#10;      return {&#10;        variant: &quot;destructive&quot; as const,&#10;        className: &quot;border-l-4 border-l-red-500&quot;&#10;      }&#10;    default:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;      }&#10;  }&#10;}&#10;&#10;// Format amount for banking notifications&#10;const formatAmount = (text: string) =&gt; {&#10;  const amountMatch = text.match(/\$?([0-9,]+\.?[0-9]*)/g)&#10;  if (amountMatch) {&#10;    return text.replace(/\$?([0-9,]+\.?[0-9]*)/g, (match) =&gt; {&#10;      const cleanAmount = match.replace(/[$,]/g, '')&#10;      return `$${parseFloat(cleanAmount).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`&#10;    })&#10;  }&#10;  return text&#10;}&#10;&#10;export const showBankNotificationAlert = (notification: Notification) =&gt; {&#10;  const { toast } = useToast()&#10;  const icon = getNotificationIcon(notification)&#10;  const style = getNotificationStyle(notification)&#10;&#10;  toast({&#10;    ...style,&#10;    duration: 8000, // 8 seconds for bank notifications&#10;    title: (&#10;      &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;        {icon}&#10;        &lt;span className=&quot;font-semibold&quot;&gt;{notification.title}&lt;/span&gt;&#10;      &lt;/div&gt;&#10;    ),&#10;    description: (&#10;      &lt;div className=&quot;mt-1&quot;&gt;&#10;        &lt;p className=&quot;text-sm&quot;&gt;{formatAmount(notification.message)}&lt;/p&gt;&#10;        &lt;p className=&quot;text-xs text-muted-foreground mt-1&quot;&gt;&#10;          {new Date(notification.timestamp).toLocaleTimeString('en-US', {&#10;            hour: '2-digit',&#10;            minute: '2-digit',&#10;            hour12: true&#10;          })}&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;    ),&#10;  })&#10;}&#10;&#10;// Show multiple notifications as a summary (for bulk updates)&#10;export const showBankNotificationSummary = (count: number, type: 'markRead' | 'newNotifications') =&gt; {&#10;  const { toast } = useToast()&#10;  const icon = type === 'markRead'&#10;    ? &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;    : &lt;Bell className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;&#10;  const title = type === 'markRead'&#10;    ? &quot;Notifications Updated&quot;&#10;    : &quot;New Notifications&quot;&#10;&#10;  const message = type === 'markRead'&#10;    ? `${count} notification${count &gt; 1 ? 's' : ''} marked as read`&#10;    : `${count} new notification${count &gt; 1 ? 's' : ''} received`&#10;&#10;  toast({&#10;    variant: &quot;default&quot;,&#10;    className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;    duration: 4000,&#10;    title: (&#10;      &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;        {icon}&#10;        &lt;span className=&quot;font-semibold&quot;&gt;{title}&lt;/span&gt;&#10;      &lt;/div&gt;&#10;    ),&#10;    description: &lt;p className=&quot;text-sm&quot;&gt;{message}&lt;/p&gt;,&#10;  })&#10;}&#10;&#10;// Admin-specific alerts for various actions&#10;export const showAdminAlert = {&#10;  success: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Success&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  error: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;destructive&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;XCircle className=&quot;h-5 w-5&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Error&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 6000,&#10;    })&#10;  },&#10;&#10;  warning: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;AlertTriangle className=&quot;h-5 w-5 text-yellow-500&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Warning&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 5000,&#10;    })&#10;  },&#10;&#10;  info: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Info&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  // Banking-specific alerts&#10;  transaction: {&#10;    created: (amount: string, recipient?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;ArrowUpRight className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Transaction Created&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Successfully sent ${amount}${recipient ? ` to ${recipient}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    received: (amount: string, sender?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;ArrowDownLeft className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Payment Received&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Received ${amount}${sender ? ` from ${sender}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    failed: (reason?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;destructive&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;XCircle className=&quot;h-5 w-5&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Transaction Failed&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: reason || &quot;Transaction could not be processed&quot;,&#10;        duration: 8000,&#10;      })&#10;    }&#10;  },&#10;&#10;  account: {&#10;    created: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Account Created&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `New account ${accountNumber} has been successfully created`,&#10;        duration: 5000,&#10;      })&#10;    },&#10;&#10;    updated: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Account Updated&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Account ${accountNumber} has been updated`,&#10;        duration: 4000,&#10;      })&#10;    },&#10;&#10;    blocked: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;AlertTriangle className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Account Blocked&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Account ${accountNumber} has been blocked`,&#10;        duration: 6000,&#10;      })&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import React from &quot;react&quot;&#10;import { Bell, CheckCircle, AlertTriangle, Info, XCircle, CreditCard, ArrowUpRight, ArrowDownLeft } from &quot;lucide-react&quot;&#10;import { useToast } from &quot;@/hooks/use-toast&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;// Bank-style notification icons based on type and content&#10;const getNotificationIcon = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;&#10;  // Check for banking-specific keywords&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return &lt;ArrowUpRight className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return &lt;ArrowDownLeft className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return &lt;CreditCard className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;&#10;  // Fallback to type-based icons&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;    case &quot;warning&quot;:&#10;      return &lt;AlertTriangle className=&quot;h-5 w-5 text-yellow-500&quot; /&gt;&#10;    case &quot;error&quot;:&#10;      return &lt;XCircle className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;    default:&#10;      return &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;}&#10;&#10;// Get notification styling based on type&#10;const getNotificationStyle = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;    }&#10;  }&#10;&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;      }&#10;    case &quot;warning&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;&#10;      }&#10;    case &quot;error&quot;:&#10;      return {&#10;        variant: &quot;destructive&quot; as const,&#10;        className: &quot;border-l-4 border-l-red-500&quot;&#10;      }&#10;    default:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;      }&#10;  }&#10;}&#10;&#10;// Format amount for banking notifications&#10;const formatAmount = (text: string) =&gt; {&#10;  const amountMatch = text.match(/\$?([0-9,]+\.?[0-9]*)/g)&#10;  if (amountMatch) {&#10;    return text.replace(/\$?([0-9,]+\.?[0-9]*)/g, (match) =&gt; {&#10;      const cleanAmount = match.replace(/[$,]/g, '')&#10;      return `$${parseFloat(cleanAmount).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`&#10;    })&#10;  }&#10;  return text&#10;}&#10;&#10;export const showBankNotificationAlert = (notification: Notification) =&gt; {&#10;  const { toast } = useToast()&#10;  const icon = getNotificationIcon(notification)&#10;  const style = getNotificationStyle(notification)&#10;&#10;  toast({&#10;    ...style,&#10;    duration: 8000, // 8 seconds for bank notifications&#10;    title: notification.title,&#10;    description: formatAmount(notification.message),&#10;  })&#10;}&#10;&#10;// Show multiple notifications as a summary (for bulk updates)&#10;export const showBankNotificationSummary = (count: number, type: 'markRead' | 'newNotifications') =&gt; {&#10;  const { toast } = useToast()&#10;&#10;  const title = type === 'markRead'&#10;    ? &quot;Notifications Updated&quot;&#10;    : &quot;New Notifications&quot;&#10;&#10;  const message = type === 'markRead'&#10;    ? `${count} notification${count &gt; 1 ? 's' : ''} marked as read`&#10;    : `${count} new notification${count &gt; 1 ? 's' : ''} received`&#10;&#10;  toast({&#10;    variant: &quot;default&quot;,&#10;    className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;    duration: 4000,&#10;    title: title,&#10;    description: message,&#10;  })&#10;}&#10;&#10;// Admin-specific alerts for various actions&#10;export const showAdminAlert = {&#10;  success: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;      title: &quot;Success&quot;,&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  error: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;destructive&quot;,&#10;      title: &quot;Error&quot;,&#10;      description: message,&#10;      duration: 6000,&#10;    })&#10;  },&#10;&#10;  warning: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;,&#10;      title: &quot;Warning&quot;,&#10;      description: message,&#10;      duration: 5000,&#10;    })&#10;  },&#10;&#10;  info: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;      title: &quot;Info&quot;,&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  // Banking-specific alerts&#10;  transaction: {&#10;    created: (amount: string, recipient?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: &quot;Transaction Created&quot;,&#10;        description: `Successfully sent ${amount}${recipient ? ` to ${recipient}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    received: (amount: string, sender?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: &quot;Payment Received&quot;,&#10;        description: `Received ${amount}${sender ? ` from ${sender}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    failed: (reason?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;destructive&quot;,&#10;        title: &quot;Transaction Failed&quot;,&#10;        description: reason || &quot;Transaction could not be processed&quot;,&#10;        duration: 8000,&#10;      })&#10;    }&#10;  },&#10;&#10;  account: {&#10;    created: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: &quot;Account Created&quot;,&#10;        description: `New account ${accountNumber} has been successfully created`,&#10;        duration: 5000,&#10;      })&#10;    },&#10;&#10;    updated: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;        title: &quot;Account Updated&quot;,&#10;        description: `Account ${accountNumber} has been updated`,&#10;        duration: 4000,&#10;      })&#10;    },&#10;&#10;    blocked: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;,&#10;        title: &quot;Account Blocked&quot;,&#10;        description: `Account ${accountNumber} has been blocked`,&#10;        duration: 6000,&#10;      })&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/common/notification-bell.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/common/notification-bell.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import React, {useEffect, useState} from &quot;react&quot;&#10;import { Bell, BellRing, Trash2, Sparkles, Check } from &quot;lucide-react&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Badge } from &quot;@/components/ui/badge&quot;&#10;import {&#10;  DropdownMenu,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuLabel,&#10;  DropdownMenuSeparator,&#10;  DropdownMenuTrigger,&#10;} from &quot;@/components/ui/dropdown-menu&quot;&#10;import {&#10;  Popover,&#10;  PopoverContent,&#10;  PopoverTrigger,&#10;} from &quot;@/components/ui/popover&quot;&#10;import { formatRelativeTime } from &quot;@/utils/format&quot;&#10;import { ScrollArea } from &quot;@/components/ui/scroll-area&quot;&#10;import { notificationService } from &quot;@/lib/api-client&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;&#10;export const NotificationBell = React.memo(() =&gt; {&#10;    const [notifications, setNotifications] = useState&lt;Notification[]&gt;([])&#10;    const [isConnected, setIsConnected] = useState(false)&#10;    const [deletePopoverOpen, setDeletePopoverOpen] = useState&lt;string | null&gt;(null)&#10;&#10;    // Simple unread count - decreases only when notifications are actually marked as read&#10;    const unreadCount = notifications.filter(n =&gt; !n.isRead).length&#10;&#10;    // Mark a single notification as read&#10;    const markAsRead = async (id: string) =&gt; {&#10;        try {&#10;            await notificationService.markAsRead(id, true)&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt;&#10;                    n.id === id ? { ...n, isRead: true } : n&#10;                )&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark notification as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Handle delete button click - show simple confirmation&#10;    const handleDeleteClick = (id: string, e: React.MouseEvent) =&gt; {&#10;        e.stopPropagation()&#10;&#10;        // Simple inline confirmation - better UX&#10;        const confirmed = window.confirm(&quot;Delete this notification?&quot;)&#10;        if (confirmed) {&#10;            confirmDeleteNotification(id)&#10;        }&#10;    }&#10;&#10;    // Confirm delete notification&#10;    const confirmDeleteNotification = async (id: string) =&gt; {&#10;        try {&#10;            await notificationService.removeNotification(id)&#10;            setNotifications(notifications =&gt;&#10;                notifications.filter(n =&gt; n.id !== id)&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to delete notification:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Mark all notifications as read&#10;    const markAllNotificationsAsRead = async () =&gt; {&#10;        try {&#10;            await notificationService.markAllNotificationsAsRead()&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt; ({ ...n, isRead: true }))&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark all notifications as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Handle &quot;View all notifications&quot; click&#10;    const handleViewAllNotifications = () =&gt; {&#10;        window.location.href = &quot;/admin/notifications&quot;&#10;    }&#10;&#10;    useEffect(() =&gt; {&#10;        const wsService = new WebSocketService()&#10;&#10;        wsService.onNotification((notification: Notification) =&gt; {&#10;            setNotifications(prev =&gt; [notification, ...prev])&#10;        })&#10;&#10;        wsService.onConnect(() =&gt; {&#10;            console.log('Connected to WebSocket')&#10;            setIsConnected(true)&#10;        })&#10;&#10;        wsService.onDisconnect(() =&gt; {&#10;            console.log('Disconnected from WebSocket')&#10;            setIsConnected(false)&#10;        })&#10;&#10;        wsService.connect()&#10;&#10;        wsService.fetchInitialNotifications(&quot;desc&quot;).then((initialNotifications: Notification[]) =&gt; {&#10;            setNotifications(initialNotifications)&#10;        }).catch((error) =&gt; {&#10;            console.error(&quot;Failed to fetch initial notifications:&quot;, error)&#10;        })&#10;&#10;        return () =&gt; {&#10;            wsService.disconnect()&#10;        }&#10;    }, [])&#10;&#10;    const recentNotifications = React.useMemo(() =&gt; notifications.slice(0, 5), [notifications])&#10;&#10;    return (&#10;        &lt;DropdownMenu&gt;&#10;            &lt;DropdownMenuTrigger asChild&gt;&#10;                &lt;Button&#10;                    variant=&quot;ghost&quot;&#10;                    size=&quot;sm&quot;&#10;                    className=&quot;relative group hover:bg-pink-50 dark:hover:bg-pink-950/20 transition-all duration-200 rounded-xl h-10 w-10&quot;&#10;                &gt;&#10;                    {unreadCount &gt; 0 ? (&#10;                        &lt;BellRing className=&quot;h-5 w-5 text-pink-600 animate-pulse&quot; /&gt;&#10;                    ) : (&#10;                        &lt;Bell className=&quot;h-5 w-5 text-muted-foreground group-hover:text-pink-600 transition-colors&quot; /&gt;&#10;                    )}&#10;&#10;                    {unreadCount &gt; 0 &amp;&amp; (&#10;                        &lt;Badge className=&quot;absolute -top-2 -right-2 h-6 w-6 flex items-center justify-center p-0 text-xs font-bold bg-gradient-to-r from-pink-500 to-pink-600 border-2 border-white dark:border-gray-900 shadow-lg animate-bounce&quot;&gt;&#10;                            {unreadCount &gt; 99 ? &quot;99+&quot; : unreadCount}&#10;                        &lt;/Badge&gt;&#10;                    )}&#10;&#10;                    {!isConnected &amp;&amp; (&#10;                        &lt;div className=&quot;absolute -bottom-1 -right-1 w-3 h-3 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full animate-pulse shadow-sm border border-white dark:border-gray-900&quot; /&gt;&#10;                    )}&#10;                &lt;/Button&gt;&#10;            &lt;/DropdownMenuTrigger&gt;&#10;&#10;            &lt;DropdownMenuContent&#10;                className=&quot;w-96 shadow-2xl border-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl rounded-2xl p-0 overflow-hidden&quot;&#10;                align=&quot;end&quot;&#10;                sideOffset={8}&#10;                forceMount&#10;            &gt;&#10;                {/* Modern header with gradient */}&#10;                &lt;div className=&quot;bg-gradient-to-r from-pink-500 to-pink-600 p-4 text-white&quot;&gt;&#10;                    &lt;DropdownMenuLabel className=&quot;flex items-center justify-between p-0 text-white&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                            &lt;Sparkles className=&quot;h-5 w-5&quot; /&gt;&#10;                            &lt;span className=&quot;font-semibold&quot;&gt;Notifications&lt;/span&gt;&#10;                            {unreadCount &gt; 0 &amp;&amp; (&#10;                                &lt;Badge className=&quot;bg-white/20 text-white border-white/30 font-medium&quot;&gt;{unreadCount} new&lt;/Badge&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                        {unreadCount &gt; 0 &amp;&amp; (&#10;                            &lt;Button&#10;                                variant=&quot;ghost&quot;&#10;                                size=&quot;sm&quot;&#10;                                onClick={markAllNotificationsAsRead}&#10;                                className=&quot;text-white hover:bg-white/20 text-xs h-8 px-3 rounded-lg font-medium transition-all duration-200&quot;&#10;                            &gt;&#10;                                Mark all read&#10;                            &lt;/Button&gt;&#10;                        )}&#10;                    &lt;/DropdownMenuLabel&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Notifications list */}&#10;                {recentNotifications.length &gt; 0 ? (&#10;                    &lt;ScrollArea className=&quot;h-80 p-2&quot;&gt;&#10;                        &lt;div className=&quot;space-y-1&quot;&gt;&#10;                            {recentNotifications.map((notification, index) =&gt; (&#10;                                &lt;DropdownMenuItem&#10;                                    key={notification.id}&#10;                                    className=&quot;p-0 focus:bg-transparent&quot;&#10;                                    onSelect={(e) =&gt; e.preventDefault()}&#10;                                &gt;&#10;                                    &lt;div className={`w-full p-4 rounded-xl cursor-pointer transition-all duration-200 group relative overflow-hidden ${&#10;                                        !notification.isRead &#10;                                            ? &quot;bg-gradient-to-r from-pink-50 to-pink-25 dark:from-pink-950/20 dark:to-pink-900/10 hover:from-pink-100 hover:to-pink-50 border border-pink-200/50 shadow-sm&quot; &#10;                                            : &quot;hover:bg-gray-50 dark:hover:bg-gray-800/50 border border-transparent&quot;&#10;                                    }`}&gt;&#10;                                        {/* Unread indicator line */}&#10;                                        {!notification.isRead &amp;&amp; (&#10;                                            &lt;div className=&quot;absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-pink-500 to-pink-600 rounded-r-full&quot; /&gt;&#10;                                        )}&#10;&#10;                                        &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                                            &lt;div className=&quot;flex items-start gap-3 flex-1&quot;&gt;&#10;                                                {/* Icon */}&#10;                                                &lt;div className={`p-2 rounded-xl shadow-sm transition-all duration-200 ${&#10;                                                    !notification.isRead&#10;                                                        ? &quot;bg-gradient-to-br from-pink-500 to-pink-600 text-white shadow-lg&quot;&#10;                                                        : &quot;bg-gray-100 dark:bg-gray-800 text-muted-foreground&quot;&#10;                                                }`}&gt;&#10;                                                    &lt;Bell className=&quot;h-4 w-4&quot; /&gt;&#10;                                                &lt;/div&gt;&#10;&#10;                                                {/* Content */}&#10;                                                &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                                    &lt;div className=&quot;flex items-center justify-between mb-1&quot;&gt;&#10;                                                        &lt;h4 className={`text-sm font-semibold leading-tight truncate ${&#10;                                                            !notification.isRead ? &quot;text-gray-900 dark:text-white&quot; : &quot;text-muted-foreground&quot;&#10;                                                        }`}&gt;&#10;                                                            {notification.title}&#10;                                                        &lt;/h4&gt;&#10;                                                    &lt;/div&gt;&#10;&#10;                                                    &lt;div className=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                                                        &lt;Badge&#10;                                                            variant=&quot;secondary&quot;&#10;                                                            className=&quot;text-xs px-2 py-0.5 bg-white/80 dark:bg-gray-800/80 text-gray-600 dark:text-gray-300 border border-gray-200 dark:border-gray-700 rounded-full font-medium&quot;&#10;                                                        &gt;&#10;                                                            {notification.type}&#10;                                                        &lt;/Badge&gt;&#10;                                                    &lt;/div&gt;&#10;&#10;                                                    &lt;p className=&quot;text-sm text-muted-foreground line-clamp-2 leading-relaxed mb-2&quot;&gt;&#10;                                                        {notification.message}&#10;                                                    &lt;/p&gt;&#10;&#10;                                                    &lt;span className=&quot;text-xs text-muted-foreground font-medium bg-gray-50/80 dark:bg-gray-800/50 px-2 py-1 rounded-md inline-block&quot;&gt;&#10;                                                        {formatRelativeTime(notification.timestamp)}&#10;                                                    &lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;&#10;                                            {/* Action buttons and indicator */}&#10;                                            &lt;div className=&quot;flex flex-col items-end gap-1 ml-2&quot;&gt;&#10;                                                &lt;div className=&quot;flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-all duration-200&quot;&gt;&#10;                                                    {!notification.isRead &amp;&amp; (&#10;                                                        &lt;Button&#10;                                                            variant=&quot;ghost&quot;&#10;                                                            size=&quot;sm&quot;&#10;                                                            onClick={(e) =&gt; {&#10;                                                                e.stopPropagation()&#10;                                                                markAsRead(notification.id)&#10;                                                            }}&#10;                                                            className=&quot;h-8 w-8 p-0 hover:bg-emerald-50 hover:text-emerald-600 dark:hover:bg-emerald-950/20 rounded-xl transition-all duration-200&quot;&#10;                                                            title=&quot;Mark as read&quot;&#10;                                                        &gt;&#10;                                                            &lt;Check className=&quot;h-3.5 w-3.5&quot; /&gt;&#10;                                                        &lt;/Button&gt;&#10;                                                    )}&#10;&#10;                                                    &lt;Button&#10;                                                        variant=&quot;ghost&quot;&#10;                                                        size=&quot;sm&quot;&#10;                                                        onClick={(e) =&gt; handleDeleteClick(notification.id, e)}&#10;                                                        className=&quot;h-8 w-8 p-0 hover:bg-red-50 hover:text-red-600 dark:hover:bg-red-950/20 rounded-xl transition-all duration-200&quot;&#10;                                                        title=&quot;Delete notification&quot;&#10;                                                    &gt;&#10;                                                        &lt;Trash2 className=&quot;h-3.5 w-3.5&quot; /&gt;&#10;                                                    &lt;/Button&gt;&#10;                                                &lt;/div&gt;&#10;&#10;                                                {!notification.isRead &amp;&amp; (&#10;                                                    &lt;div className=&quot;w-2 h-2 bg-gradient-to-r from-pink-500 to-pink-600 rounded-full animate-pulse shadow-sm mr-4&quot; /&gt;&#10;                                                )}&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/DropdownMenuItem&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    &lt;/ScrollArea&gt;&#10;                ) : (&#10;                    &lt;div className=&quot;p-8 text-center&quot;&gt;&#10;                        &lt;div className=&quot;w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 rounded-2xl flex items-center justify-center&quot;&gt;&#10;                            &lt;Bell className=&quot;h-8 w-8 text-muted-foreground&quot; /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p className=&quot;text-sm font-medium text-muted-foreground mb-1&quot;&gt;All caught up!&lt;/p&gt;&#10;                        &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;No new notifications&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Footer */}&#10;                {recentNotifications.length &gt; 0 &amp;&amp; (&#10;                    &lt;&gt;&#10;                        &lt;DropdownMenuSeparator className=&quot;border-gray-200 dark:border-gray-700&quot; /&gt;&#10;                        &lt;div className=&quot;border-t bg-gray-50/50 dark:bg-gray-800/50 p-3&quot;&gt;&#10;                            &lt;Button&#10;                                variant=&quot;ghost&quot;&#10;                                onClick={handleViewAllNotifications}&#10;                                className=&quot;w-full h-10 text-sm font-medium text-pink-600 hover:text-pink-700 hover:bg-pink-50 dark:hover:bg-pink-950/20 rounded-xl transition-all duration-200&quot;&#10;                            &gt;&#10;                                View all notifications →&#10;                            &lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                )}&#10;            &lt;/DropdownMenuContent&gt;&#10;        &lt;/DropdownMenu&gt;&#10;    )&#10;})&#10;&#10;NotificationBell.displayName = &quot;NotificationBell&quot;&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import React, {useEffect, useState} from &quot;react&quot;&#10;import { Bell, BellRing, Trash2, Sparkles, Check } from &quot;lucide-react&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Badge } from &quot;@/components/ui/badge&quot;&#10;import {&#10;  DropdownMenu,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuLabel,&#10;  DropdownMenuSeparator,&#10;  DropdownMenuTrigger,&#10;} from &quot;@/components/ui/dropdown-menu&quot;&#10;import {&#10;  AlertDialog,&#10;  AlertDialogAction,&#10;  AlertDialogCancel,&#10;  AlertDialogContent,&#10;  AlertDialogDescription,&#10;  AlertDialogFooter,&#10;  AlertDialogHeader,&#10;  AlertDialogTitle,&#10;} from &quot;@/components/ui/alert-dialog&quot;&#10;import { formatRelativeTime } from &quot;@/utils/format&quot;&#10;import { ScrollArea } from &quot;@/components/ui/scroll-area&quot;&#10;import { notificationService } from &quot;@/lib/api-client&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;&#10;export const NotificationBell = React.memo(() =&gt; {&#10;    const [notifications, setNotifications] = useState&lt;Notification[]&gt;([])&#10;    const [isConnected, setIsConnected] = useState(false)&#10;    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)&#10;    const [notificationToDelete, setNotificationToDelete] = useState&lt;string | null&gt;(null)&#10;&#10;    // Simple unread count - decreases only when notifications are actually marked as read&#10;    const unreadCount = notifications.filter(n =&gt; !n.isRead).length&#10;&#10;    // Mark a single notification as read&#10;    const markAsRead = async (id: string) =&gt; {&#10;        try {&#10;            await notificationService.markAsRead(id, true)&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt;&#10;                    n.id === id ? { ...n, isRead: true } : n&#10;                )&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark notification as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Handle delete button click - open confirmation dialog&#10;    const handleDeleteClick = (id: string, e: React.MouseEvent) =&gt; {&#10;        e.stopPropagation()&#10;        setNotificationToDelete(id)&#10;        setDeleteDialogOpen(true)&#10;    }&#10;&#10;    // Confirm delete notification&#10;    const confirmDeleteNotification = async () =&gt; {&#10;        if (!notificationToDelete) return&#10;        &#10;        try {&#10;            await notificationService.removeNotification(notificationToDelete)&#10;            setNotifications(notifications =&gt;&#10;                notifications.filter(n =&gt; n.id !== notificationToDelete)&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to delete notification:&quot;, error)&#10;        } finally {&#10;            setDeleteDialogOpen(false)&#10;            setNotificationToDelete(null)&#10;        }&#10;    }&#10;&#10;    // Cancel delete&#10;    const cancelDelete = () =&gt; {&#10;        setDeleteDialogOpen(false)&#10;        setNotificationToDelete(null)&#10;    }&#10;&#10;    // Mark all notifications as read&#10;    const markAllNotificationsAsRead = async () =&gt; {&#10;        try {&#10;            await notificationService.markAllNotificationsAsRead()&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt; ({ ...n, isRead: true }))&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark all notifications as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Handle &quot;View all notifications&quot; click&#10;    const handleViewAllNotifications = () =&gt; {&#10;        window.location.href = &quot;/admin/notifications&quot;&#10;    }&#10;&#10;    useEffect(() =&gt; {&#10;        const wsService = new WebSocketService()&#10;&#10;        wsService.onNotification((notification: Notification) =&gt; {&#10;            setNotifications(prev =&gt; [notification, ...prev])&#10;        })&#10;&#10;        wsService.onConnect(() =&gt; {&#10;            console.log('Connected to WebSocket')&#10;            setIsConnected(true)&#10;        })&#10;&#10;        wsService.onDisconnect(() =&gt; {&#10;            console.log('Disconnected from WebSocket')&#10;            setIsConnected(false)&#10;        })&#10;&#10;        wsService.connect()&#10;&#10;        wsService.fetchInitialNotifications(&quot;desc&quot;).then((initialNotifications: Notification[]) =&gt; {&#10;            setNotifications(initialNotifications)&#10;        }).catch((error) =&gt; {&#10;            console.error(&quot;Failed to fetch initial notifications:&quot;, error)&#10;        })&#10;&#10;        return () =&gt; {&#10;            wsService.disconnect()&#10;        }&#10;    }, [])&#10;&#10;    const recentNotifications = React.useMemo(() =&gt; notifications.slice(0, 5), [notifications])&#10;&#10;    return (&#10;        &lt;DropdownMenu&gt;&#10;            &lt;DropdownMenuTrigger asChild&gt;&#10;                &lt;Button&#10;                    variant=&quot;ghost&quot;&#10;                    size=&quot;sm&quot;&#10;                    className=&quot;relative group hover:bg-pink-50 dark:hover:bg-pink-950/20 transition-all duration-200 rounded-xl h-10 w-10&quot;&#10;                &gt;&#10;                    {unreadCount &gt; 0 ? (&#10;                        &lt;BellRing className=&quot;h-5 w-5 text-pink-600 animate-pulse&quot; /&gt;&#10;                    ) : (&#10;                        &lt;Bell className=&quot;h-5 w-5 text-muted-foreground group-hover:text-pink-600 transition-colors&quot; /&gt;&#10;                    )}&#10;&#10;                    {unreadCount &gt; 0 &amp;&amp; (&#10;                        &lt;Badge className=&quot;absolute -top-2 -right-2 h-6 w-6 flex items-center justify-center p-0 text-xs font-bold bg-gradient-to-r from-pink-500 to-pink-600 border-2 border-white dark:border-gray-900 shadow-lg animate-bounce&quot;&gt;&#10;                            {unreadCount &gt; 99 ? &quot;99+&quot; : unreadCount}&#10;                        &lt;/Badge&gt;&#10;                    )}&#10;&#10;                    {!isConnected &amp;&amp; (&#10;                        &lt;div className=&quot;absolute -bottom-1 -right-1 w-3 h-3 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full animate-pulse shadow-sm border border-white dark:border-gray-900&quot; /&gt;&#10;                    )}&#10;                &lt;/Button&gt;&#10;            &lt;/DropdownMenuTrigger&gt;&#10;&#10;            &lt;DropdownMenuContent&#10;                className=&quot;w-96 shadow-2xl border-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl rounded-2xl p-0 overflow-hidden&quot;&#10;                align=&quot;end&quot;&#10;                sideOffset={8}&#10;                forceMount&#10;            &gt;&#10;                {/* Modern header with gradient */}&#10;                &lt;div className=&quot;bg-gradient-to-r from-pink-500 to-pink-600 p-4 text-white&quot;&gt;&#10;                    &lt;DropdownMenuLabel className=&quot;flex items-center justify-between p-0 text-white&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                            &lt;Sparkles className=&quot;h-5 w-5&quot; /&gt;&#10;                            &lt;span className=&quot;font-semibold&quot;&gt;Notifications&lt;/span&gt;&#10;                            {unreadCount &gt; 0 &amp;&amp; (&#10;                                &lt;Badge className=&quot;bg-white/20 text-white border-white/30 font-medium&quot;&gt;{unreadCount} new&lt;/Badge&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                        {unreadCount &gt; 0 &amp;&amp; (&#10;                            &lt;Button&#10;                                variant=&quot;ghost&quot;&#10;                                size=&quot;sm&quot;&#10;                                onClick={markAllNotificationsAsRead}&#10;                                className=&quot;text-white hover:bg-white/20 text-xs h-8 px-3 rounded-lg font-medium transition-all duration-200&quot;&#10;                            &gt;&#10;                                Mark all read&#10;                            &lt;/Button&gt;&#10;                        )}&#10;                    &lt;/DropdownMenuLabel&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Notifications list */}&#10;                {recentNotifications.length &gt; 0 ? (&#10;                    &lt;ScrollArea className=&quot;h-80 p-2&quot;&gt;&#10;                        &lt;div className=&quot;space-y-1&quot;&gt;&#10;                            {recentNotifications.map((notification, index) =&gt; (&#10;                                &lt;DropdownMenuItem&#10;                                    key={notification.id}&#10;                                    className=&quot;p-0 focus:bg-transparent&quot;&#10;                                    onSelect={(e) =&gt; e.preventDefault()}&#10;                                &gt;&#10;                                    &lt;div className={`w-full p-4 rounded-xl cursor-pointer transition-all duration-200 group relative overflow-hidden ${&#10;                                        !notification.isRead &#10;                                            ? &quot;bg-gradient-to-r from-pink-50 to-pink-25 dark:from-pink-950/20 dark:to-pink-900/10 hover:from-pink-100 hover:to-pink-50 border border-pink-200/50 shadow-sm&quot; &#10;                                            : &quot;hover:bg-gray-50 dark:hover:bg-gray-800/50 border border-transparent&quot;&#10;                                    }`}&gt;&#10;                                        {/* Unread indicator line */}&#10;                                        {!notification.isRead &amp;&amp; (&#10;                                            &lt;div className=&quot;absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-pink-500 to-pink-600 rounded-r-full&quot; /&gt;&#10;                                        )}&#10;&#10;                                        &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                                            &lt;div className=&quot;flex items-start gap-3 flex-1&quot;&gt;&#10;                                                {/* Icon */}&#10;                                                &lt;div className={`p-2 rounded-xl shadow-sm transition-all duration-200 ${&#10;                                                    !notification.isRead&#10;                                                        ? &quot;bg-gradient-to-br from-pink-500 to-pink-600 text-white shadow-lg&quot;&#10;                                                        : &quot;bg-gray-100 dark:bg-gray-800 text-muted-foreground&quot;&#10;                                                }`}&gt;&#10;                                                    &lt;Bell className=&quot;h-4 w-4&quot; /&gt;&#10;                                                &lt;/div&gt;&#10;&#10;                                                {/* Content */}&#10;                                                &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                                    &lt;div className=&quot;flex items-center justify-between mb-1&quot;&gt;&#10;                                                        &lt;h4 className={`text-sm font-semibold leading-tight truncate ${&#10;                                                            !notification.isRead ? &quot;text-gray-900 dark:text-white&quot; : &quot;text-muted-foreground&quot;&#10;                                                        }`}&gt;&#10;                                                            {notification.title}&#10;                                                        &lt;/h4&gt;&#10;                                                    &lt;/div&gt;&#10;&#10;                                                    &lt;div className=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                                                        &lt;Badge&#10;                                                            variant=&quot;secondary&quot;&#10;                                                            className=&quot;text-xs px-2 py-0.5 bg-white/80 dark:bg-gray-800/80 text-gray-600 dark:text-gray-300 border border-gray-200 dark:border-gray-700 rounded-full font-medium&quot;&#10;                                                        &gt;&#10;                                                            {notification.type}&#10;                                                        &lt;/Badge&gt;&#10;                                                    &lt;/div&gt;&#10;&#10;                                                    &lt;p className=&quot;text-sm text-muted-foreground line-clamp-2 leading-relaxed mb-2&quot;&gt;&#10;                                                        {notification.message}&#10;                                                    &lt;/p&gt;&#10;&#10;                                                    &lt;span className=&quot;text-xs text-muted-foreground font-medium bg-gray-50/80 dark:bg-gray-800/50 px-2 py-1 rounded-md inline-block&quot;&gt;&#10;                                                        {formatRelativeTime(notification.timestamp)}&#10;                                                    &lt;/span&gt;&#10;                                                &lt;/div&gt;&#10;                                            &lt;/div&gt;&#10;&#10;                                            {/* Action buttons and indicator */}&#10;                                            &lt;div className=&quot;flex flex-col items-end gap-1 ml-2&quot;&gt;&#10;                                                &lt;div className=&quot;flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-all duration-200&quot;&gt;&#10;                                                    {!notification.isRead &amp;&amp; (&#10;                                                        &lt;Button&#10;                                                            variant=&quot;ghost&quot;&#10;                                                            size=&quot;sm&quot;&#10;                                                            onClick={(e) =&gt; {&#10;                                                                e.stopPropagation()&#10;                                                                markAsRead(notification.id)&#10;                                                            }}&#10;                                                            className=&quot;h-8 w-8 p-0 hover:bg-emerald-50 hover:text-emerald-600 dark:hover:bg-emerald-950/20 rounded-xl transition-all duration-200&quot;&#10;                                                            title=&quot;Mark as read&quot;&#10;                                                        &gt;&#10;                                                            &lt;Check className=&quot;h-3.5 w-3.5&quot; /&gt;&#10;                                                        &lt;/Button&gt;&#10;                                                    )}&#10;&#10;                                                    &lt;Button&#10;                                                        variant=&quot;ghost&quot;&#10;                                                        size=&quot;sm&quot;&#10;                                                        onClick={(e) =&gt; handleDeleteClick(notification.id, e)}&#10;                                                        className=&quot;h-8 w-8 p-0 hover:bg-red-50 hover:text-red-600 dark:hover:bg-red-950/20 rounded-xl transition-all duration-200&quot;&#10;                                                        title=&quot;Delete notification&quot;&#10;                                                    &gt;&#10;                                                        &lt;Trash2 className=&quot;h-3.5 w-3.5&quot; /&gt;&#10;                                                    &lt;/Button&gt;&#10;                                                &lt;/div&gt;&#10;&#10;                                                {!notification.isRead &amp;&amp; (&#10;                                                    &lt;div className=&quot;w-2 h-2 bg-gradient-to-r from-pink-500 to-pink-600 rounded-full animate-pulse shadow-sm mr-4&quot; /&gt;&#10;                                                )}&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/DropdownMenuItem&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    &lt;/ScrollArea&gt;&#10;                ) : (&#10;                    &lt;div className=&quot;p-8 text-center&quot;&gt;&#10;                        &lt;div className=&quot;w-16 h-16 mx-auto mb-4 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 rounded-2xl flex items-center justify-center&quot;&gt;&#10;                            &lt;Bell className=&quot;h-8 w-8 text-muted-foreground&quot; /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p className=&quot;text-sm font-medium text-muted-foreground mb-1&quot;&gt;All caught up!&lt;/p&gt;&#10;                        &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;No new notifications&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Footer */}&#10;                {recentNotifications.length &gt; 0 &amp;&amp; (&#10;                    &lt;&gt;&#10;                        &lt;DropdownMenuSeparator className=&quot;border-gray-200 dark:border-gray-700&quot; /&gt;&#10;                        &lt;div className=&quot;border-t bg-gray-50/50 dark:bg-gray-800/50 p-3&quot;&gt;&#10;                            &lt;Button&#10;                                variant=&quot;ghost&quot;&#10;                                onClick={handleViewAllNotifications}&#10;                                className=&quot;w-full h-10 text-sm font-medium text-pink-600 hover:text-pink-700 hover:bg-pink-50 dark:hover:bg-pink-950/20 rounded-xl transition-all duration-200&quot;&#10;                            &gt;&#10;                                View all notifications →&#10;                            &lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                )}&#10;            &lt;/DropdownMenuContent&gt;&#10;&#10;            {/* Delete confirmation dialog */}&#10;            &lt;AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}&gt;&#10;                &lt;AlertDialogContent className=&quot;sm:max-w-[425px]&quot;&gt;&#10;                    &lt;AlertDialogHeader&gt;&#10;                        &lt;AlertDialogTitle className=&quot;text-lg font-semibold&quot;&gt;&#10;                            Delete Notification&#10;                        &lt;/AlertDialogTitle&gt;&#10;                        &lt;AlertDialogDescription className=&quot;text-sm text-muted-foreground&quot;&gt;&#10;                            Are you sure you want to delete this notification? This action cannot be undone.&#10;                        &lt;/AlertDialogDescription&gt;&#10;                    &lt;/AlertDialogHeader&gt;&#10;&#10;                    &lt;div className=&quot;flex justify-end gap-2&quot;&gt;&#10;                        &lt;AlertDialogCancel asChild&gt;&#10;                            &lt;Button variant=&quot;outline&quot; className=&quot;h-10 px-4 rounded-md&quot;&gt;&#10;                                Cancel&#10;                            &lt;/Button&gt;&#10;                        &lt;/AlertDialogCancel&gt;&#10;                        &lt;AlertDialogAction asChild&gt;&#10;                            &lt;Button&#10;                                variant=&quot;destructive&quot;&#10;                                className=&quot;h-10 px-4 rounded-md&quot;&#10;                                onClick={confirmDeleteNotification}&#10;                            &gt;&#10;                                Delete&#10;                            &lt;/Button&gt;&#10;                        &lt;/AlertDialogAction&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/AlertDialogContent&gt;&#10;            &lt;/AlertDialog&gt;&#10;        &lt;/DropdownMenu&gt;&#10;    )&#10;})&#10;&#10;NotificationBell.displayName = &quot;NotificationBell&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>