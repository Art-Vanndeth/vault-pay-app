<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/admin/alerts-demo/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/alerts-demo/page.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;&#10;import { showAdminAlert, showBankNotificationAlert, showBankNotificationSummary } from &quot;@/components/common/notification-alert&quot;&#10;import { &#10;  Bell, &#10;  CheckCircle, &#10;  AlertTriangle, &#10;  Info, &#10;  XCircle, &#10;  CreditCard, &#10;  ArrowUpRight, &#10;  ArrowDownLeft,&#10;  DollarSign,&#10;  Users,&#10;  Settings&#10;} from &quot;lucide-react&quot;&#10;&#10;export default function AdminAlertsDemo() {&#10;  // Basic admin alerts&#10;  const showSuccessAlert = () =&gt; {&#10;    showAdminAlert.success(&quot;Operation completed successfully!&quot;)&#10;  }&#10;&#10;  const showErrorAlert = () =&gt; {&#10;    showAdminAlert.error(&quot;Something went wrong. Please try again.&quot;)&#10;  }&#10;&#10;  const showWarningAlert = () =&gt; {&#10;    showAdminAlert.warning(&quot;This action requires administrator approval.&quot;)&#10;  }&#10;&#10;  const showInfoAlert = () =&gt; {&#10;    showAdminAlert.info(&quot;System maintenance scheduled for tonight at 2:00 AM.&quot;)&#10;  }&#10;&#10;  // Banking transaction alerts&#10;  const showTransactionCreated = () =&gt; {&#10;    showAdminAlert.transaction.created(&quot;$1,250.00&quot;, &quot;John Doe&quot;)&#10;  }&#10;&#10;  const showTransactionReceived = () =&gt; {&#10;    showAdminAlert.transaction.received(&quot;$850.75&quot;, &quot;Jane Smith&quot;)&#10;  }&#10;&#10;  const showTransactionFailed = () =&gt; {&#10;    showAdminAlert.transaction.failed(&quot;Insufficient funds&quot;)&#10;  }&#10;&#10;  // Account management alerts&#10;  const showAccountCreated = () =&gt; {&#10;    showAdminAlert.account.created(&quot;ACC-2024-001234&quot;)&#10;  }&#10;&#10;  const showAccountUpdated = () =&gt; {&#10;    showAdminAlert.account.updated(&quot;ACC-2024-001234&quot;)&#10;  }&#10;&#10;  const showAccountBlocked = () =&gt; {&#10;    showAdminAlert.account.blocked(&quot;ACC-2024-001234&quot;)&#10;  }&#10;&#10;  // Notification-specific alerts&#10;  const showNotificationAlert = () =&gt; {&#10;    const mockNotification = {&#10;      id: &quot;demo-001&quot;,&#10;      title: &quot;Transfer Completed&quot;,&#10;      message: &quot;You have successfully sent $500.00 to Alice Johnson&quot;,&#10;      type: &quot;success&quot; as const,&#10;      isRead: false,&#10;      timestamp: new Date().toISOString()&#10;    }&#10;    showBankNotificationAlert(mockNotification)&#10;  }&#10;&#10;  const showBulkMarkRead = () =&gt; {&#10;    showBankNotificationSummary(5, 'markRead')&#10;  }&#10;&#10;  const showNewNotifications = () =&gt; {&#10;    showBankNotificationSummary(3, 'newNotifications')&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-6 p-6&quot;&gt;&#10;      &lt;div className=&quot;space-y-2&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold&quot;&gt;Admin Alert System Demo&lt;/h1&gt;&#10;        &lt;p className=&quot;text-muted-foreground&quot;&gt;&#10;          Test all the bank-style notification alerts available in your admin panel&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid gap-6 md:grid-cols-2 lg:grid-cols-3&quot;&gt;&#10;        {/* Basic Admin Alerts */}&#10;        &lt;Card&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Settings className=&quot;h-5 w-5&quot; /&gt;&#10;              Basic Admin Alerts&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Standard administrative notification alerts&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-3&quot;&gt;&#10;            &lt;Button &#10;              onClick={showSuccessAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;CheckCircle className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Success Alert&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showErrorAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;XCircle className=&quot;mr-2 h-4 w-4 text-red-500&quot; /&gt;&#10;              Error Alert&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showWarningAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;AlertTriangle className=&quot;mr-2 h-4 w-4 text-yellow-500&quot; /&gt;&#10;              Warning Alert&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showInfoAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;Info className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;              Info Alert&#10;            &lt;/Button&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Banking Transaction Alerts */}&#10;        &lt;Card&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;DollarSign className=&quot;h-5 w-5&quot; /&gt;&#10;              Transaction Alerts&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Banking transaction-specific notifications&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-3&quot;&gt;&#10;            &lt;Button &#10;              onClick={showTransactionCreated} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;ArrowUpRight className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Transaction Sent&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showTransactionReceived} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;ArrowDownLeft className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Payment Received&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showTransactionFailed} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;XCircle className=&quot;mr-2 h-4 w-4 text-red-500&quot; /&gt;&#10;              Transaction Failed&#10;            &lt;/Button&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Account Management Alerts */}&#10;        &lt;Card&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Users className=&quot;h-5 w-5&quot; /&gt;&#10;              Account Management&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Account-related administrative alerts&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-3&quot;&gt;&#10;            &lt;Button &#10;              onClick={showAccountCreated} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;CheckCircle className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Account Created&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showAccountUpdated} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;Info className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;              Account Updated&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showAccountBlocked} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;AlertTriangle className=&quot;mr-2 h-4 w-4 text-red-500&quot; /&gt;&#10;              Account Blocked&#10;            &lt;/Button&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Notification System Alerts */}&#10;        &lt;Card className=&quot;md:col-span-2 lg:col-span-3&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Bell className=&quot;h-5 w-5&quot; /&gt;&#10;              Notification System Alerts&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Real-time notification alerts and summaries&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent&gt;&#10;            &lt;div className=&quot;grid gap-3 md:grid-cols-3&quot;&gt;&#10;              &lt;Button &#10;                onClick={showNotificationAlert} &#10;                className=&quot;w-full&quot;&#10;                variant=&quot;outline&quot;&#10;              &gt;&#10;                &lt;CreditCard className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;                Bank Notification&#10;              &lt;/Button&gt;&#10;              &lt;Button &#10;                onClick={showBulkMarkRead} &#10;                className=&quot;w-full&quot;&#10;                variant=&quot;outline&quot;&#10;              &gt;&#10;                &lt;CheckCircle className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;                Bulk Mark Read&#10;              &lt;/Button&gt;&#10;              &lt;Button &#10;                onClick={showNewNotifications} &#10;                className=&quot;w-full&quot;&#10;                variant=&quot;outline&quot;&#10;              &gt;&#10;                &lt;Bell className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;                New Notifications&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Usage Examples */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;How to Use in Your Code&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;&#10;            Import and use these alerts in any admin component&#10;          &lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent&gt;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;rounded-lg bg-muted p-4&quot;&gt;&#10;              &lt;p className=&quot;font-mono text-sm&quot;&gt;&#10;                &lt;span className=&quot;text-blue-600&quot;&gt;import&lt;/span&gt; {`{ showAdminAlert }`} &lt;span className=&quot;text-blue-600&quot;&gt;from&lt;/span&gt; &lt;span className=&quot;text-green-600&quot;&gt;&quot;@/components/common/notification-alert&quot;&lt;/span&gt;&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;              &lt;p&gt;&lt;strong&gt;Basic alerts:&lt;/strong&gt;&lt;/p&gt;&#10;              &lt;ul className=&quot;ml-4 space-y-1 font-mono text-xs&quot;&gt;&#10;                &lt;li&gt;• showAdminAlert.success(&quot;Message&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.error(&quot;Message&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.warning(&quot;Message&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.info(&quot;Message&quot;)&lt;/li&gt;&#10;              &lt;/ul&gt;&#10;              &lt;p&gt;&lt;strong&gt;Transaction alerts:&lt;/strong&gt;&lt;/p&gt;&#10;              &lt;ul className=&quot;ml-4 space-y-1 font-mono text-xs&quot;&gt;&#10;                &lt;li&gt;• showAdminAlert.transaction.created(&quot;$100&quot;, &quot;John&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.transaction.received(&quot;$50&quot;, &quot;Jane&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.transaction.failed(&quot;Reason&quot;)&lt;/li&gt;&#10;              &lt;/ul&gt;&#10;              &lt;p&gt;&lt;strong&gt;Account alerts:&lt;/strong&gt;&lt;/p&gt;&#10;              &lt;ul className=&quot;ml-4 space-y-1 font-mono text-xs&quot;&gt;&#10;                &lt;li&gt;• showAdminAlert.account.created(&quot;ACC-123&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.account.updated(&quot;ACC-123&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.account.blocked(&quot;ACC-123&quot;)&lt;/li&gt;&#10;              &lt;/ul&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/accounts/[accountNumber]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/accounts/[accountNumber]/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/[id]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/[id]/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/[id]/status/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/[id]/status/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/common/admin-notification-handler.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/common/admin-notification-handler.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import { useEffect } from &quot;react&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import { showBankNotificationAlert } from &quot;./notification-alert&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;export const AdminNotificationHandler = () =&gt; {&#10;  useEffect(() =&gt; {&#10;    console.log('Admin notification handler initialized')&#10;    const wsService = new WebSocketService()&#10;&#10;    // Set up WebSocket event handlers for admin pages only&#10;    wsService.onNotification((notification: Notification) =&gt; {&#10;      console.log('Admin: New notification received', notification)&#10;      // Show bank-style alert for new notification in admin&#10;      showBankNotificationAlert(notification)&#10;    })&#10;&#10;    // Handle connection status&#10;    wsService.onConnect(() =&gt; {&#10;      console.log('Admin: Connected to WebSocket for notifications')&#10;    })&#10;&#10;    wsService.onDisconnect(() =&gt; {&#10;      console.log('Admin: Disconnected from WebSocket')&#10;    })&#10;&#10;    // Connect to WebSocket&#10;    wsService.connect()&#10;&#10;    return () =&gt; {&#10;      console.log('Admin notification handler cleanup')&#10;      wsService.disconnect()&#10;    }&#10;  }, [])&#10;&#10;  // This component doesn't render anything visible&#10;  return null&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { useEffect } from &quot;react&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import { showBankNotificationAlert, showBankNotificationSummary } from &quot;./notification-alert&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;export const AdminNotificationHandler = () =&gt; {&#10;  useEffect(() =&gt; {&#10;    console.log('Admin notification handler initialized')&#10;    &#10;    // Create a single WebSocket connection for admin&#10;    const wsService = new WebSocketService()&#10;&#10;    // Set up WebSocket event handlers for admin pages&#10;    wsService.onNotification((notification: Notification) =&gt; {&#10;      console.log('Admin: New notification received', notification)&#10;      &#10;      // Show bank-style alert for new notification in admin&#10;      showBankNotificationAlert(notification)&#10;      &#10;      // Also show the &quot;new notifications&quot; summary&#10;      showBankNotificationSummary(1, 'newNotifications')&#10;    })&#10;&#10;    // Handle connection status&#10;    wsService.onConnect(() =&gt; {&#10;      console.log('Admin: Connected to WebSocket for notifications')&#10;    })&#10;&#10;    wsService.onDisconnect(() =&gt; {&#10;      console.log('Admin: Disconnected from WebSocket')&#10;    })&#10;&#10;    // Connect to WebSocket&#10;    wsService.connect()&#10;&#10;    return () =&gt; {&#10;      console.log('Admin notification handler cleanup')&#10;      wsService.disconnect()&#10;    }&#10;  }, [])&#10;&#10;  // This component doesn't render anything visible&#10;  return null&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/common/notification-alert.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/common/notification-alert.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import React from &quot;react&quot;&#10;import { Bell, CheckCircle, AlertTriangle, Info, XCircle, CreditCard, ArrowUpRight, ArrowDownLeft } from &quot;lucide-react&quot;&#10;import { useToast } from &quot;@/hooks/use-toast&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;// Bank-style notification icons based on type and content&#10;const getNotificationIcon = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;&#10;  // Check for banking-specific keywords&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return &lt;ArrowUpRight className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return &lt;ArrowDownLeft className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return &lt;CreditCard className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;&#10;  // Fallback to type-based icons&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;    case &quot;warning&quot;:&#10;      return &lt;AlertTriangle className=&quot;h-5 w-5 text-yellow-500&quot; /&gt;&#10;    case &quot;error&quot;:&#10;      return &lt;XCircle className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;    default:&#10;      return &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;}&#10;&#10;// Get notification styling based on type&#10;const getNotificationStyle = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;    }&#10;  }&#10;&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;      }&#10;    case &quot;warning&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;&#10;      }&#10;    case &quot;error&quot;:&#10;      return {&#10;        variant: &quot;destructive&quot; as const,&#10;        className: &quot;border-l-4 border-l-red-500&quot;&#10;      }&#10;    default:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;      }&#10;  }&#10;}&#10;&#10;// Format amount for banking notifications&#10;const formatAmount = (text: string) =&gt; {&#10;  const amountMatch = text.match(/\$?([0-9,]+\.?[0-9]*)/g)&#10;  if (amountMatch) {&#10;    return text.replace(/\$?([0-9,]+\.?[0-9]*)/g, (match) =&gt; {&#10;      const cleanAmount = match.replace(/[$,]/g, '')&#10;      return `$${parseFloat(cleanAmount).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`&#10;    })&#10;  }&#10;  return text&#10;}&#10;&#10;export const showBankNotificationAlert = (notification: Notification) =&gt; {&#10;  const { toast } = useToast()&#10;  const icon = getNotificationIcon(notification)&#10;  const style = getNotificationStyle(notification)&#10;&#10;  toast({&#10;    ...style,&#10;    duration: 8000, // 8 seconds for bank notifications&#10;    title: (&#10;      &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;        {icon}&#10;        &lt;span className=&quot;font-semibold&quot;&gt;{notification.title}&lt;/span&gt;&#10;      &lt;/div&gt;&#10;    ),&#10;    description: (&#10;      &lt;div className=&quot;mt-1&quot;&gt;&#10;        &lt;p className=&quot;text-sm&quot;&gt;{formatAmount(notification.message)}&lt;/p&gt;&#10;        &lt;p className=&quot;text-xs text-muted-foreground mt-1&quot;&gt;&#10;          {new Date(notification.timestamp).toLocaleTimeString('en-US', {&#10;            hour: '2-digit',&#10;            minute: '2-digit',&#10;            hour12: true&#10;          })}&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;    ),&#10;  })&#10;}&#10;&#10;// Show multiple notifications as a summary (for bulk updates)&#10;export const showBankNotificationSummary = (count: number, type: 'markRead' | 'newNotifications') =&gt; {&#10;  const { toast } = useToast()&#10;  const icon = type === 'markRead'&#10;    ? &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;    : &lt;Bell className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;&#10;  const title = type === 'markRead'&#10;    ? &quot;Notifications Updated&quot;&#10;    : &quot;New Notifications&quot;&#10;&#10;  const message = type === 'markRead'&#10;    ? `${count} notification${count &gt; 1 ? 's' : ''} marked as read`&#10;    : `${count} new notification${count &gt; 1 ? 's' : ''} received`&#10;&#10;  toast({&#10;    variant: &quot;default&quot;,&#10;    className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;    duration: 4000,&#10;    title: (&#10;      &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;        {icon}&#10;        &lt;span className=&quot;font-semibold&quot;&gt;{title}&lt;/span&gt;&#10;      &lt;/div&gt;&#10;    ),&#10;    description: &lt;p className=&quot;text-sm&quot;&gt;{message}&lt;/p&gt;,&#10;  })&#10;}&#10;&#10;// Admin-specific alerts for various actions&#10;export const showAdminAlert = {&#10;  success: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Success&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  error: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;destructive&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;XCircle className=&quot;h-5 w-5&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Error&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 6000,&#10;    })&#10;  },&#10;&#10;  warning: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;AlertTriangle className=&quot;h-5 w-5 text-yellow-500&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Warning&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 5000,&#10;    })&#10;  },&#10;&#10;  info: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Info&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  // Banking-specific alerts&#10;  transaction: {&#10;    created: (amount: string, recipient?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;ArrowUpRight className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Transaction Created&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Successfully sent ${amount}${recipient ? ` to ${recipient}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    received: (amount: string, sender?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;ArrowDownLeft className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Payment Received&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Received ${amount}${sender ? ` from ${sender}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    failed: (reason?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;destructive&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;XCircle className=&quot;h-5 w-5&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Transaction Failed&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: reason || &quot;Transaction could not be processed&quot;,&#10;        duration: 8000,&#10;      })&#10;    }&#10;  },&#10;&#10;  account: {&#10;    created: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Account Created&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `New account ${accountNumber} has been successfully created`,&#10;        duration: 5000,&#10;      })&#10;    },&#10;&#10;    updated: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Account Updated&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Account ${accountNumber} has been updated`,&#10;        duration: 4000,&#10;      })&#10;    },&#10;&#10;    blocked: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;AlertTriangle className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Account Blocked&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Account ${accountNumber} has been blocked`,&#10;        duration: 6000,&#10;      })&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import React from &quot;react&quot;&#10;import { Bell, CheckCircle, AlertTriangle, Info, XCircle, CreditCard, ArrowUpRight, ArrowDownLeft } from &quot;lucide-react&quot;&#10;import { useToast } from &quot;@/hooks/use-toast&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;// Bank-style notification icons based on type and content&#10;const getNotificationIcon = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;&#10;  // Check for banking-specific keywords&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return &lt;ArrowUpRight className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return &lt;ArrowDownLeft className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return &lt;CreditCard className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;&#10;  // Fallback to type-based icons&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;    case &quot;warning&quot;:&#10;      return &lt;AlertTriangle className=&quot;h-5 w-5 text-yellow-500&quot; /&gt;&#10;    case &quot;error&quot;:&#10;      return &lt;XCircle className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;    default:&#10;      return &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;}&#10;&#10;// Get notification styling based on type&#10;const getNotificationStyle = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;    }&#10;  }&#10;&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;      }&#10;    case &quot;warning&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;&#10;      }&#10;    case &quot;error&quot;:&#10;      return {&#10;        variant: &quot;destructive&quot; as const,&#10;        className: &quot;border-l-4 border-l-red-500&quot;&#10;      }&#10;    default:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;      }&#10;  }&#10;}&#10;&#10;// Format amount for banking notifications&#10;const formatAmount = (text: string) =&gt; {&#10;  const amountMatch = text.match(/\$?([0-9,]+\.?[0-9]*)/g)&#10;  if (amountMatch) {&#10;    return text.replace(/\$?([0-9,]+\.?[0-9]*)/g, (match) =&gt; {&#10;      const cleanAmount = match.replace(/[$,]/g, '')&#10;      return `$${parseFloat(cleanAmount).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`&#10;    })&#10;  }&#10;  return text&#10;}&#10;&#10;export const showBankNotificationAlert = (notification: Notification) =&gt; {&#10;  const { toast } = useToast()&#10;  const icon = getNotificationIcon(notification)&#10;  const style = getNotificationStyle(notification)&#10;&#10;  toast({&#10;    ...style,&#10;    duration: 8000, // 8 seconds for bank notifications&#10;    title: notification.title,&#10;    description: formatAmount(notification.message),&#10;  })&#10;}&#10;&#10;// Show multiple notifications as a summary (for bulk updates)&#10;export const showBankNotificationSummary = (count: number, type: 'markRead' | 'newNotifications') =&gt; {&#10;  const { toast } = useToast()&#10;&#10;  const title = type === 'markRead'&#10;    ? &quot;Notifications Updated&quot;&#10;    : &quot;New Notifications&quot;&#10;&#10;  const message = type === 'markRead'&#10;    ? `${count} notification${count &gt; 1 ? 's' : ''} marked as read`&#10;    : `${count} new notification${count &gt; 1 ? 's' : ''} received`&#10;&#10;  toast({&#10;    variant: &quot;default&quot;,&#10;    className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;    duration: 4000,&#10;    title: title,&#10;    description: message,&#10;  })&#10;}&#10;&#10;// Admin-specific alerts for various actions&#10;export const showAdminAlert = {&#10;  success: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;      title: &quot;Success&quot;,&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  error: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;destructive&quot;,&#10;      title: &quot;Error&quot;,&#10;      description: message,&#10;      duration: 6000,&#10;    })&#10;  },&#10;&#10;  warning: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;,&#10;      title: &quot;Warning&quot;,&#10;      description: message,&#10;      duration: 5000,&#10;    })&#10;  },&#10;&#10;  info: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;      title: &quot;Info&quot;,&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  // Banking-specific alerts&#10;  transaction: {&#10;    created: (amount: string, recipient?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: &quot;Transaction Created&quot;,&#10;        description: `Successfully sent ${amount}${recipient ? ` to ${recipient}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    received: (amount: string, sender?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: &quot;Payment Received&quot;,&#10;        description: `Received ${amount}${sender ? ` from ${sender}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    failed: (reason?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;destructive&quot;,&#10;        title: &quot;Transaction Failed&quot;,&#10;        description: reason || &quot;Transaction could not be processed&quot;,&#10;        duration: 8000,&#10;      })&#10;    }&#10;  },&#10;&#10;  account: {&#10;    created: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: &quot;Account Created&quot;,&#10;        description: `New account ${accountNumber} has been successfully created`,&#10;        duration: 5000,&#10;      })&#10;    },&#10;&#10;    updated: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;        title: &quot;Account Updated&quot;,&#10;        description: `Account ${accountNumber} has been updated`,&#10;        duration: 4000,&#10;      })&#10;    },&#10;&#10;    blocked: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;,&#10;        title: &quot;Account Blocked&quot;,&#10;        description: `Account ${accountNumber} has been blocked`,&#10;        duration: 6000,&#10;      })&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/common/notification-bell.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/common/notification-bell.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import React, {useEffect, useState} from &quot;react&quot;&#10;import { Bell, Check, Trash2 } from &quot;lucide-react&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Badge } from &quot;@/components/ui/badge&quot;&#10;import {&#10;  DropdownMenu,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuLabel,&#10;  DropdownMenuSeparator,&#10;  DropdownMenuTrigger,&#10;} from &quot;@/components/ui/dropdown-menu&quot;&#10;import { formatRelativeTime } from &quot;@/utils/format&quot;&#10;import { ScrollArea } from &quot;@/components/ui/scroll-area&quot;&#10;import { notificationService } from &quot;@/lib/api-client&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;&#10;export const NotificationBell = React.memo(() =&gt; {&#10;    const [notifications, setNotifications] = useState&lt;Notification[]&gt;([])&#10;    const [isConnected, setIsConnected] = useState(false)&#10;&#10;    // Simple unread count - decreases only when notifications are actually marked as read&#10;    const unreadCount = notifications.filter(n =&gt; !n.isRead).length&#10;&#10;    // Mark a single notification as read&#10;    const markAsRead = async (id: string) =&gt; {&#10;        try {&#10;            await notificationService.markAsRead(id, true)&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt;&#10;                    n.id === id ? { ...n, isRead: true } : n&#10;                )&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark notification as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Delete a single notification&#10;    const deleteNotification = async (id: string, e: React.MouseEvent) =&gt; {&#10;        e.stopPropagation()&#10;        try {&#10;            await notificationService.removeNotification(id)&#10;            setNotifications(notifications =&gt;&#10;                notifications.filter(n =&gt; n.id !== id)&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to delete notification:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Mark all notifications as read&#10;    const markAllNotificationsAsRead = async () =&gt; {&#10;        try {&#10;            await notificationService.markAllNotificationsAsRead()&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt; ({ ...n, isRead: true }))&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark all notifications as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Handle &quot;View all notifications&quot; click&#10;    const handleViewAllNotifications = () =&gt; {&#10;        window.location.href = &quot;/admin/notifications&quot;&#10;    }&#10;&#10;    useEffect(() =&gt; {&#10;        const wsService = new WebSocketService()&#10;&#10;        wsService.onNotification((notification: Notification) =&gt; {&#10;            setNotifications(prev =&gt; [notification, ...prev])&#10;        })&#10;&#10;        wsService.onConnect(() =&gt; {&#10;            console.log('Connected to WebSocket')&#10;            setIsConnected(true)&#10;        })&#10;&#10;        wsService.onDisconnect(() =&gt; {&#10;            console.log('Disconnected from WebSocket')&#10;            setIsConnected(false)&#10;        })&#10;&#10;        wsService.connect()&#10;&#10;        wsService.fetchInitialNotifications(&quot;desc&quot;).then((initialNotifications: Notification[]) =&gt; {&#10;            setNotifications(initialNotifications)&#10;        }).catch((error) =&gt; {&#10;            console.error(&quot;Failed to fetch initial notifications:&quot;, error)&#10;        })&#10;&#10;        return () =&gt; {&#10;            wsService.disconnect()&#10;        }&#10;    }, [])&#10;&#10;    const recentNotifications = React.useMemo(() =&gt; notifications.slice(0, 5), [notifications])&#10;&#10;    return (&#10;        &lt;DropdownMenu&gt;&#10;            &lt;DropdownMenuTrigger asChild&gt;&#10;                &lt;Button&#10;                    variant=&quot;ghost&quot;&#10;                    size=&quot;sm&quot;&#10;                    className=&quot;relative hover:bg-gray-50 focus:outline-none focus:ring-0 border-0&quot;&#10;                &gt;&#10;                    &lt;Bell className=&quot;h-5 w-5 text-gray-600&quot; /&gt;&#10;                    {unreadCount &gt; 0 &amp;&amp; (&#10;                        &lt;Badge&#10;                            variant=&quot;destructive&quot;&#10;                            className=&quot;absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs font-medium bg-red-500 border-0&quot;&#10;                        &gt;&#10;                            {unreadCount &gt; 99 ? &quot;99+&quot; : unreadCount}&#10;                        &lt;/Badge&gt;&#10;                    )}&#10;                    {!isConnected &amp;&amp; (&#10;                        &lt;div className=&quot;absolute -bottom-1 -right-1 w-2 h-2 bg-yellow-500 rounded-full animate-pulse&quot; /&gt;&#10;                    )}&#10;                &lt;/Button&gt;&#10;            &lt;/DropdownMenuTrigger&gt;&#10;&#10;            &lt;DropdownMenuContent className=&quot;w-80 shadow-lg border bg-white rounded-lg&quot; align=&quot;end&quot; forceMount&gt;&#10;                {/* Header */}&#10;                &lt;DropdownMenuLabel className=&quot;px-4 py-3 border-b bg-gray-50&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                        &lt;span className=&quot;font-semibold text-gray-900&quot;&gt;Notifications&lt;/span&gt;&#10;                        {unreadCount &gt; 0 &amp;&amp; (&#10;                            &lt;Button&#10;                                variant=&quot;ghost&quot;&#10;                                size=&quot;sm&quot;&#10;                                onClick={markAllNotificationsAsRead}&#10;                                className=&quot;text-xs h-6 px-2 text-blue-600 hover:text-blue-800 hover:bg-blue-50&quot;&#10;                            &gt;&#10;                                Mark all read ({unreadCount})&#10;                            &lt;/Button&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/DropdownMenuLabel&gt;&#10;&#10;                {/* Notifications List */}&#10;                {recentNotifications.length &gt; 0 ? (&#10;                    &lt;ScrollArea className=&quot;max-h-80&quot;&gt;&#10;                        &lt;div className=&quot;py-1&quot;&gt;&#10;                            {recentNotifications.map((notification) =&gt; (&#10;                                &lt;DropdownMenuItem&#10;                                    key={notification.id}&#10;                                    className=&quot;flex items-start p-4 cursor-pointer hover:bg-gray-50 focus:bg-gray-50&quot;&#10;                                    onClick={() =&gt; !notification.isRead &amp;&amp; markAsRead(notification.id)}&#10;                                &gt;&#10;                                    &lt;div className=&quot;flex items-start gap-3 flex-1&quot;&gt;&#10;                                        {/* Icon */}&#10;                                        &lt;div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${&#10;                                            !notification.isRead ? 'bg-blue-500' : 'bg-gray-300'&#10;                                        }`} /&gt;&#10;&#10;                                        {/* Content */}&#10;                                        &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                            &lt;div className=&quot;flex items-center gap-2 mb-1&quot;&gt;&#10;                                                &lt;h4 className={`font-medium text-sm ${&#10;                                                    !notification.isRead ? &quot;text-gray-900&quot; : &quot;text-gray-600&quot;&#10;                                                }`}&gt;&#10;                                                    {notification.title}&#10;                                                &lt;/h4&gt;&#10;                                                &lt;Badge variant=&quot;outline&quot; className=&quot;text-xs px-1.5 py-0.5 capitalize&quot;&gt;&#10;                                                    {notification.type}&#10;                                                &lt;/Badge&gt;&#10;                                            &lt;/div&gt;&#10;&#10;                                            &lt;p className=&quot;text-sm text-gray-600 line-clamp-2 mb-1&quot;&gt;&#10;                                                {notification.message}&#10;                                            &lt;/p&gt;&#10;&#10;                                            &lt;p className=&quot;text-xs text-gray-500&quot;&gt;&#10;                                                {formatRelativeTime(notification.timestamp)}&#10;                                            &lt;/p&gt;&#10;                                        &lt;/div&gt;&#10;&#10;                                        {/* Delete Button */}&#10;                                        &lt;Button&#10;                                            variant=&quot;ghost&quot;&#10;                                            size=&quot;sm&quot;&#10;                                            onClick={(e) =&gt; deleteNotification(notification.id, e)}&#10;                                            className=&quot;h-6 w-6 p-0 text-gray-400 hover:text-red-500 hover:bg-red-50 opacity-0 group-hover:opacity-100 transition-opacity&quot;&#10;                                        &gt;&#10;                                            &lt;Trash2 className=&quot;h-3 w-3&quot; /&gt;&#10;                                        &lt;/Button&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/DropdownMenuItem&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    &lt;/ScrollArea&gt;&#10;                ) : (&#10;                    &lt;div className=&quot;p-8 text-center&quot;&gt;&#10;                        &lt;Bell className=&quot;h-12 w-12 text-gray-300 mx-auto mb-4&quot; /&gt;&#10;                        &lt;h3 className=&quot;text-sm font-medium text-gray-900 mb-1&quot;&gt;No notifications&lt;/h3&gt;&#10;                        &lt;p className=&quot;text-xs text-gray-500&quot;&gt;You're all caught up!&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Footer */}&#10;                &lt;DropdownMenuSeparator /&gt;&#10;                &lt;DropdownMenuItem&#10;                    className=&quot;text-center justify-center py-3 hover:bg-gray-50 focus:bg-gray-50&quot;&#10;                    onClick={handleViewAllNotifications}&#10;                &gt;&#10;                    &lt;span className=&quot;text-sm text-blue-600 hover:text-blue-800 font-medium cursor-pointer&quot;&gt;&#10;                        View all notifications&#10;                    &lt;/span&gt;&#10;                &lt;/DropdownMenuItem&gt;&#10;            &lt;/DropdownMenuContent&gt;&#10;        &lt;/DropdownMenu&gt;&#10;    )&#10;})&#10;&#10;NotificationBell.displayName = &quot;NotificationBell&quot;&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import React, {useEffect, useState} from &quot;react&quot;&#10;import { Bell, Trash2 } from &quot;lucide-react&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Badge } from &quot;@/components/ui/badge&quot;&#10;import {&#10;  DropdownMenu,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuLabel,&#10;  DropdownMenuSeparator,&#10;  DropdownMenuTrigger,&#10;} from &quot;@/components/ui/dropdown-menu&quot;&#10;import { formatRelativeTime } from &quot;@/utils/format&quot;&#10;import { ScrollArea } from &quot;@/components/ui/scroll-area&quot;&#10;import { notificationService } from &quot;@/lib/api-client&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;&#10;export const NotificationBell = React.memo(() =&gt; {&#10;    const [notifications, setNotifications] = useState&lt;Notification[]&gt;([])&#10;    const [isConnected, setIsConnected] = useState(false)&#10;&#10;    // Simple unread count - decreases only when notifications are actually marked as read&#10;    const unreadCount = notifications.filter(n =&gt; !n.isRead).length&#10;&#10;    // Mark a single notification as read&#10;    const markAsRead = async (id: string) =&gt; {&#10;        try {&#10;            await notificationService.markAsRead(id, true)&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt;&#10;                    n.id === id ? { ...n, isRead: true } : n&#10;                )&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark notification as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Delete a single notification&#10;    const deleteNotification = async (id: string, e: React.MouseEvent) =&gt; {&#10;        e.stopPropagation()&#10;        try {&#10;            await notificationService.removeNotification(id)&#10;            setNotifications(notifications =&gt;&#10;                notifications.filter(n =&gt; n.id !== id)&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to delete notification:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Mark all notifications as read&#10;    const markAllNotificationsAsRead = async () =&gt; {&#10;        try {&#10;            await notificationService.markAllNotificationsAsRead()&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt; ({ ...n, isRead: true }))&#10;            )&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark all notifications as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Handle &quot;View all notifications&quot; click&#10;    const handleViewAllNotifications = () =&gt; {&#10;        window.location.href = &quot;/admin/notifications&quot;&#10;    }&#10;&#10;    useEffect(() =&gt; {&#10;        const wsService = new WebSocketService()&#10;&#10;        wsService.onNotification((notification: Notification) =&gt; {&#10;            setNotifications(prev =&gt; [notification, ...prev])&#10;        })&#10;&#10;        wsService.onConnect(() =&gt; {&#10;            console.log('Connected to WebSocket')&#10;            setIsConnected(true)&#10;        })&#10;&#10;        wsService.onDisconnect(() =&gt; {&#10;            console.log('Disconnected from WebSocket')&#10;            setIsConnected(false)&#10;        })&#10;&#10;        wsService.connect()&#10;&#10;        wsService.fetchInitialNotifications(&quot;desc&quot;).then((initialNotifications: Notification[]) =&gt; {&#10;            setNotifications(initialNotifications)&#10;        }).catch((error) =&gt; {&#10;            console.error(&quot;Failed to fetch initial notifications:&quot;, error)&#10;        })&#10;&#10;        return () =&gt; {&#10;            wsService.disconnect()&#10;        }&#10;    }, [])&#10;&#10;    const recentNotifications = React.useMemo(() =&gt; notifications.slice(0, 5), [notifications])&#10;&#10;    return (&#10;        &lt;DropdownMenu&gt;&#10;            &lt;DropdownMenuTrigger asChild&gt;&#10;                &lt;Button&#10;                    variant=&quot;ghost&quot;&#10;                    size=&quot;sm&quot;&#10;                    className=&quot;relative h-10 w-10 rounded-full hover:bg-gray-100 transition-colors duration-200&quot;&#10;                &gt;&#10;                    &lt;Bell className=&quot;h-5 w-5 text-slate-600&quot; /&gt;&#10;                    {unreadCount &gt; 0 &amp;&amp; (&#10;                        &lt;Badge&#10;                            className=&quot;absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center p-0 text-xs font-semibold bg-pink-500 hover:bg-pink-500 text-white border-2 border-white shadow-lg animate-pulse&quot;&#10;                        &gt;&#10;                            {unreadCount &gt; 99 ? &quot;99+&quot; : unreadCount}&#10;                        &lt;/Badge&gt;&#10;                    )}&#10;                    {!isConnected &amp;&amp; (&#10;                        &lt;div className=&quot;absolute -bottom-1 -right-1 w-3 h-3 bg-amber-400 rounded-full border-2 border-white animate-pulse&quot; /&gt;&#10;                    )}&#10;                &lt;/Button&gt;&#10;            &lt;/DropdownMenuTrigger&gt;&#10;&#10;            &lt;DropdownMenuContent&#10;                className=&quot;w-96 bg-white border border-gray-200 rounded-2xl shadow-2xl p-0 overflow-hidden&quot;&#10;                align=&quot;end&quot;&#10;                sideOffset={8}&#10;                forceMount&#10;            &gt;&#10;                {/* Modern header with accent */}&#10;                &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;div className=&quot;absolute inset-x-0 top-0 h-1 bg-gradient-to-r from-pink-500 to-rose-500&quot; /&gt;&#10;                    &lt;DropdownMenuLabel className=&quot;px-6 py-5 bg-white border-b border-gray-100&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                                &lt;div className=&quot;w-8 h-8 bg-gradient-to-br from-pink-500 to-rose-500 rounded-lg flex items-center justify-center&quot;&gt;&#10;                                    &lt;Bell className=&quot;h-4 w-4 text-white&quot; /&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;h3 className=&quot;text-lg font-semibold text-gray-900&quot;&gt;Notifications&lt;/h3&gt;&#10;                            &lt;/div&gt;&#10;                            {unreadCount &gt; 0 &amp;&amp; (&#10;                                &lt;Button&#10;                                    variant=&quot;ghost&quot;&#10;                                    size=&quot;sm&quot;&#10;                                    onClick={markAllNotificationsAsRead}&#10;                                    className=&quot;h-8 px-3 text-xs font-medium text-pink-600 hover:text-pink-700 hover:bg-pink-50 rounded-lg transition-all duration-200&quot;&#10;                                &gt;&#10;                                    Mark all read ({unreadCount})&#10;                                &lt;/Button&gt;&#10;                            )}&#10;                        &lt;/div&gt;&#10;                    &lt;/DropdownMenuLabel&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Notifications list */}&#10;                {recentNotifications.length &gt; 0 ? (&#10;                    &lt;ScrollArea className=&quot;max-h-96&quot;&gt;&#10;                        &lt;div className=&quot;p-2 space-y-1&quot;&gt;&#10;                            {recentNotifications.map((notification) =&gt; (&#10;                                &lt;DropdownMenuItem&#10;                                    key={notification.id}&#10;                                    className=&quot;p-0 focus:bg-transparent&quot;&#10;                                    onClick={() =&gt; !notification.isRead &amp;&amp; markAsRead(notification.id)}&#10;                                &gt;&#10;                                    &lt;div className={`w-full p-4 rounded-xl cursor-pointer transition-all duration-200 group relative overflow-hidden ${&#10;                                        !notification.isRead &#10;                                            ? &quot;bg-gradient-to-r from-pink-50 to-rose-50 hover:from-pink-100 hover:to-rose-100 border border-pink-200&quot; &#10;                                            : &quot;bg-gray-50 hover:bg-gray-100&quot;&#10;                                    }`}&gt;&#10;                                        {/* Unread indicator line */}&#10;                                        {!notification.isRead &amp;&amp; (&#10;                                            &lt;div className=&quot;absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b from-pink-500 to-rose-500 rounded-r-full&quot; /&gt;&#10;                                        )}&#10;                                        &#10;                                        &lt;div className=&quot;flex items-start space-x-3&quot;&gt;&#10;                                            {/* Status dot */}&#10;                                            &lt;div className=&quot;flex-shrink-0 mt-1.5&quot;&gt;&#10;                                                &lt;div className={`w-2.5 h-2.5 rounded-full ${&#10;                                                    !notification.isRead &#10;                                                        ? &quot;bg-pink-500 shadow-lg shadow-pink-500/50&quot; &#10;                                                        : &quot;bg-gray-300&quot;&#10;                                                }`} /&gt;&#10;                                            &lt;/div&gt;&#10;&#10;                                            {/* Content */}&#10;                                            &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                                                &lt;div className=&quot;flex items-start justify-between&quot;&gt;&#10;                                                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                                                        &lt;h4 className={`text-sm font-semibold leading-tight mb-1 ${&#10;                                                            !notification.isRead ? &quot;text-gray-900&quot; : &quot;text-gray-600&quot;&#10;                                                        }`}&gt;&#10;                                                            {notification.title}&#10;                                                        &lt;/h4&gt;&#10;                                                        &lt;div className=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                                                            &lt;Badge&#10;                                                                variant=&quot;secondary&quot;&#10;                                                                className=&quot;text-xs px-2 py-0.5 bg-white/80 text-gray-600 border border-gray-200 rounded-full font-medium&quot;&#10;                                                            &gt;&#10;                                                                {notification.type}&#10;                                                            &lt;/Badge&gt;&#10;                                                            &lt;span className=&quot;text-xs text-gray-500 font-medium&quot;&gt;&#10;                                                                {formatRelativeTime(notification.timestamp)}&#10;                                                            &lt;/span&gt;&#10;                                                        &lt;/div&gt;&#10;                                                    &lt;/div&gt;&#10;                                                    &#10;                                                    {/* Delete button */}&#10;                                                    &lt;Button&#10;                                                        variant=&quot;ghost&quot;&#10;                                                        size=&quot;sm&quot;&#10;                                                        onClick={(e) =&gt; deleteNotification(notification.id, e)}&#10;                                                        className=&quot;h-8 w-8 p-0 opacity-0 group-hover:opacity-100 transition-all duration-200 text-gray-400 hover:text-pink-500 hover:bg-pink-100 rounded-lg ml-2&quot;&#10;                                                    &gt;&#10;                                                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                                                    &lt;/Button&gt;&#10;                                                &lt;/div&gt;&#10;&#10;                                                &lt;p className=&quot;text-sm text-gray-600 leading-relaxed line-clamp-2&quot;&gt;&#10;                                                    {notification.message}&#10;                                                &lt;/p&gt;&#10;                                            &lt;/div&gt;&#10;                                        &lt;/div&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/DropdownMenuItem&gt;&#10;                            ))}&#10;                        &lt;/div&gt;&#10;                    &lt;/ScrollArea&gt;&#10;                ) : (&#10;                    &lt;div className=&quot;p-12 text-center&quot;&gt;&#10;                        &lt;div className=&quot;w-20 h-20 mx-auto mb-4 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center&quot;&gt;&#10;                            &lt;Bell className=&quot;h-8 w-8 text-gray-400&quot; /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;h3 className=&quot;text-base font-semibold text-gray-900 mb-2&quot;&gt;All caught up!&lt;/h3&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 leading-relaxed&quot;&gt;No new notifications to show&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                {/* Footer */}&#10;                {recentNotifications.length &gt; 0 &amp;&amp; (&#10;                    &lt;&gt;&#10;                        &lt;DropdownMenuSeparator className=&quot;border-gray-200&quot; /&gt;&#10;                        &lt;div className=&quot;p-3&quot;&gt;&#10;                            &lt;Button&#10;                                variant=&quot;ghost&quot;&#10;                                onClick={handleViewAllNotifications}&#10;                                className=&quot;w-full h-10 text-sm font-medium text-gray-700 hover:text-pink-600 hover:bg-gradient-to-r hover:from-pink-50 hover:to-rose-50 rounded-xl transition-all duration-200&quot;&#10;                            &gt;&#10;                                View all notifications&#10;                            &lt;/Button&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/&gt;&#10;                )}&#10;            &lt;/DropdownMenuContent&gt;&#10;        &lt;/DropdownMenu&gt;&#10;    )&#10;})&#10;&#10;NotificationBell.displayName = &quot;NotificationBell&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>