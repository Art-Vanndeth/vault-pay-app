<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/admin/alerts-demo/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/alerts-demo/page.tsx" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;&#10;import { showAdminAlert, showBankNotificationAlert, showBankNotificationSummary } from &quot;@/components/common/notification-alert&quot;&#10;import { &#10;  Bell, &#10;  CheckCircle, &#10;  AlertTriangle, &#10;  Info, &#10;  XCircle, &#10;  CreditCard, &#10;  ArrowUpRight, &#10;  ArrowDownLeft,&#10;  DollarSign,&#10;  Users,&#10;  Settings&#10;} from &quot;lucide-react&quot;&#10;&#10;export default function AdminAlertsDemo() {&#10;  // Basic admin alerts&#10;  const showSuccessAlert = () =&gt; {&#10;    showAdminAlert.success(&quot;Operation completed successfully!&quot;)&#10;  }&#10;&#10;  const showErrorAlert = () =&gt; {&#10;    showAdminAlert.error(&quot;Something went wrong. Please try again.&quot;)&#10;  }&#10;&#10;  const showWarningAlert = () =&gt; {&#10;    showAdminAlert.warning(&quot;This action requires administrator approval.&quot;)&#10;  }&#10;&#10;  const showInfoAlert = () =&gt; {&#10;    showAdminAlert.info(&quot;System maintenance scheduled for tonight at 2:00 AM.&quot;)&#10;  }&#10;&#10;  // Banking transaction alerts&#10;  const showTransactionCreated = () =&gt; {&#10;    showAdminAlert.transaction.created(&quot;$1,250.00&quot;, &quot;John Doe&quot;)&#10;  }&#10;&#10;  const showTransactionReceived = () =&gt; {&#10;    showAdminAlert.transaction.received(&quot;$850.75&quot;, &quot;Jane Smith&quot;)&#10;  }&#10;&#10;  const showTransactionFailed = () =&gt; {&#10;    showAdminAlert.transaction.failed(&quot;Insufficient funds&quot;)&#10;  }&#10;&#10;  // Account management alerts&#10;  const showAccountCreated = () =&gt; {&#10;    showAdminAlert.account.created(&quot;ACC-2024-001234&quot;)&#10;  }&#10;&#10;  const showAccountUpdated = () =&gt; {&#10;    showAdminAlert.account.updated(&quot;ACC-2024-001234&quot;)&#10;  }&#10;&#10;  const showAccountBlocked = () =&gt; {&#10;    showAdminAlert.account.blocked(&quot;ACC-2024-001234&quot;)&#10;  }&#10;&#10;  // Notification-specific alerts&#10;  const showNotificationAlert = () =&gt; {&#10;    const mockNotification = {&#10;      id: &quot;demo-001&quot;,&#10;      title: &quot;Transfer Completed&quot;,&#10;      message: &quot;You have successfully sent $500.00 to Alice Johnson&quot;,&#10;      type: &quot;success&quot; as const,&#10;      isRead: false,&#10;      timestamp: new Date().toISOString()&#10;    }&#10;    showBankNotificationAlert(mockNotification)&#10;  }&#10;&#10;  const showBulkMarkRead = () =&gt; {&#10;    showBankNotificationSummary(5, 'markRead')&#10;  }&#10;&#10;  const showNewNotifications = () =&gt; {&#10;    showBankNotificationSummary(3, 'newNotifications')&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-6 p-6&quot;&gt;&#10;      &lt;div className=&quot;space-y-2&quot;&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold&quot;&gt;Admin Alert System Demo&lt;/h1&gt;&#10;        &lt;p className=&quot;text-muted-foreground&quot;&gt;&#10;          Test all the bank-style notification alerts available in your admin panel&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      &lt;div className=&quot;grid gap-6 md:grid-cols-2 lg:grid-cols-3&quot;&gt;&#10;        {/* Basic Admin Alerts */}&#10;        &lt;Card&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Settings className=&quot;h-5 w-5&quot; /&gt;&#10;              Basic Admin Alerts&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Standard administrative notification alerts&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-3&quot;&gt;&#10;            &lt;Button &#10;              onClick={showSuccessAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;CheckCircle className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Success Alert&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showErrorAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;XCircle className=&quot;mr-2 h-4 w-4 text-red-500&quot; /&gt;&#10;              Error Alert&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showWarningAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;AlertTriangle className=&quot;mr-2 h-4 w-4 text-yellow-500&quot; /&gt;&#10;              Warning Alert&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showInfoAlert} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;Info className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;              Info Alert&#10;            &lt;/Button&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Banking Transaction Alerts */}&#10;        &lt;Card&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;DollarSign className=&quot;h-5 w-5&quot; /&gt;&#10;              Transaction Alerts&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Banking transaction-specific notifications&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-3&quot;&gt;&#10;            &lt;Button &#10;              onClick={showTransactionCreated} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;ArrowUpRight className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Transaction Sent&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showTransactionReceived} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;ArrowDownLeft className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Payment Received&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showTransactionFailed} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;XCircle className=&quot;mr-2 h-4 w-4 text-red-500&quot; /&gt;&#10;              Transaction Failed&#10;            &lt;/Button&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Account Management Alerts */}&#10;        &lt;Card&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Users className=&quot;h-5 w-5&quot; /&gt;&#10;              Account Management&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Account-related administrative alerts&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent className=&quot;space-y-3&quot;&gt;&#10;            &lt;Button &#10;              onClick={showAccountCreated} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;CheckCircle className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;              Account Created&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showAccountUpdated} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;Info className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;              Account Updated&#10;            &lt;/Button&gt;&#10;            &lt;Button &#10;              onClick={showAccountBlocked} &#10;              className=&quot;w-full&quot;&#10;              variant=&quot;outline&quot;&#10;            &gt;&#10;              &lt;AlertTriangle className=&quot;mr-2 h-4 w-4 text-red-500&quot; /&gt;&#10;              Account Blocked&#10;            &lt;/Button&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;&#10;        {/* Notification System Alerts */}&#10;        &lt;Card className=&quot;md:col-span-2 lg:col-span-3&quot;&gt;&#10;          &lt;CardHeader&gt;&#10;            &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;&#10;              &lt;Bell className=&quot;h-5 w-5&quot; /&gt;&#10;              Notification System Alerts&#10;            &lt;/CardTitle&gt;&#10;            &lt;CardDescription&gt;&#10;              Real-time notification alerts and summaries&#10;            &lt;/CardDescription&gt;&#10;          &lt;/CardHeader&gt;&#10;          &lt;CardContent&gt;&#10;            &lt;div className=&quot;grid gap-3 md:grid-cols-3&quot;&gt;&#10;              &lt;Button &#10;                onClick={showNotificationAlert} &#10;                className=&quot;w-full&quot;&#10;                variant=&quot;outline&quot;&#10;              &gt;&#10;                &lt;CreditCard className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;                Bank Notification&#10;              &lt;/Button&gt;&#10;              &lt;Button &#10;                onClick={showBulkMarkRead} &#10;                className=&quot;w-full&quot;&#10;                variant=&quot;outline&quot;&#10;              &gt;&#10;                &lt;CheckCircle className=&quot;mr-2 h-4 w-4 text-green-500&quot; /&gt;&#10;                Bulk Mark Read&#10;              &lt;/Button&gt;&#10;              &lt;Button &#10;                onClick={showNewNotifications} &#10;                className=&quot;w-full&quot;&#10;                variant=&quot;outline&quot;&#10;              &gt;&#10;                &lt;Bell className=&quot;mr-2 h-4 w-4 text-blue-500&quot; /&gt;&#10;                New Notifications&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/CardContent&gt;&#10;        &lt;/Card&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Usage Examples */}&#10;      &lt;Card&gt;&#10;        &lt;CardHeader&gt;&#10;          &lt;CardTitle&gt;How to Use in Your Code&lt;/CardTitle&gt;&#10;          &lt;CardDescription&gt;&#10;            Import and use these alerts in any admin component&#10;          &lt;/CardDescription&gt;&#10;        &lt;/CardHeader&gt;&#10;        &lt;CardContent&gt;&#10;          &lt;div className=&quot;space-y-4&quot;&gt;&#10;            &lt;div className=&quot;rounded-lg bg-muted p-4&quot;&gt;&#10;              &lt;p className=&quot;font-mono text-sm&quot;&gt;&#10;                &lt;span className=&quot;text-blue-600&quot;&gt;import&lt;/span&gt; {`{ showAdminAlert }`} &lt;span className=&quot;text-blue-600&quot;&gt;from&lt;/span&gt; &lt;span className=&quot;text-green-600&quot;&gt;&quot;@/components/common/notification-alert&quot;&lt;/span&gt;&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;space-y-2 text-sm&quot;&gt;&#10;              &lt;p&gt;&lt;strong&gt;Basic alerts:&lt;/strong&gt;&lt;/p&gt;&#10;              &lt;ul className=&quot;ml-4 space-y-1 font-mono text-xs&quot;&gt;&#10;                &lt;li&gt;• showAdminAlert.success(&quot;Message&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.error(&quot;Message&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.warning(&quot;Message&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.info(&quot;Message&quot;)&lt;/li&gt;&#10;              &lt;/ul&gt;&#10;              &lt;p&gt;&lt;strong&gt;Transaction alerts:&lt;/strong&gt;&lt;/p&gt;&#10;              &lt;ul className=&quot;ml-4 space-y-1 font-mono text-xs&quot;&gt;&#10;                &lt;li&gt;• showAdminAlert.transaction.created(&quot;$100&quot;, &quot;John&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.transaction.received(&quot;$50&quot;, &quot;Jane&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.transaction.failed(&quot;Reason&quot;)&lt;/li&gt;&#10;              &lt;/ul&gt;&#10;              &lt;p&gt;&lt;strong&gt;Account alerts:&lt;/strong&gt;&lt;/p&gt;&#10;              &lt;ul className=&quot;ml-4 space-y-1 font-mono text-xs&quot;&gt;&#10;                &lt;li&gt;• showAdminAlert.account.created(&quot;ACC-123&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.account.updated(&quot;ACC-123&quot;)&lt;/li&gt;&#10;                &lt;li&gt;• showAdminAlert.account.blocked(&quot;ACC-123&quot;)&lt;/li&gt;&#10;              &lt;/ul&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/CardContent&gt;&#10;      &lt;/Card&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/admin/layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/layout.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import type React from &quot;react&quot;&#10;&#10;import { useState } from &quot;react&quot;&#10;import { Navbar } from &quot;@/components/common/navbar&quot;&#10;import { Sidebar } from &quot;@/components/common/sidebar&quot;&#10;&#10;export default function AdminLayout({&#10;  children,&#10;}: {&#10;  children: React.ReactNode&#10;}) {&#10;  const [sidebarOpen, setSidebarOpen] = useState(false)&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-background&quot;&gt;&#10;      &lt;Navbar onMenuClick={() =&gt; setSidebarOpen(!sidebarOpen)} showMenuButton={true} /&gt;&#10;&#10;      &lt;div className=&quot;flex&quot;&gt;&#10;        &lt;Sidebar isOpen={sidebarOpen} onClose={() =&gt; setSidebarOpen(false)} /&gt;&#10;&#10;        &lt;main className=&quot;flex-1 p-6 lg:ml-64&quot;&gt;{children}&lt;/main&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import type React from &quot;react&quot;&#10;&#10;import { useState } from &quot;react&quot;&#10;import { Navbar } from &quot;@/components/common/navbar&quot;&#10;import { Sidebar } from &quot;@/components/common/sidebar&quot;&#10;import { AdminNotificationHandler } from &quot;@/components/common/admin-notification-handler&quot;&#10;&#10;export default function AdminLayout({&#10;  children,&#10;}: {&#10;  children: React.ReactNode&#10;}) {&#10;  const [sidebarOpen, setSidebarOpen] = useState(false)&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-background&quot;&gt;&#10;      &lt;Navbar onMenuClick={() =&gt; setSidebarOpen(!sidebarOpen)} showMenuButton={true} /&gt;&#10;&#10;      &lt;div className=&quot;flex&quot;&gt;&#10;        &lt;Sidebar isOpen={sidebarOpen} onClose={() =&gt; setSidebarOpen(false)} /&gt;&#10;&#10;        &lt;main className=&quot;flex-1 p-6 lg:ml-64&quot;&gt;{children}&lt;/main&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Admin-specific notification handler for toast alerts */}&#10;      &lt;AdminNotificationHandler /&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/admin/notifications/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/notifications/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import {Button} from &quot;@/components/ui/button&quot;&#10;import {CheckCheck} from &quot;lucide-react&quot;&#10;import type {Notification} from &quot;@/types/notification&quot;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import {notificationService} from &quot;@/lib/api-client&quot;&#10;import {NotificationList} from &quot;@/components/Notification/NotificationList&quot;&#10;import {WebSocketService} from &quot;@/lib/websocket&quot;;&#10;&#10;export default function NotificationsPage() {&#10;    const [notifications, setNotifications] = useState&lt;Notification[]&gt;([]);&#10;    const [loading, setLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Helper functions for notification actions&#10;    const unreadCount = notifications.filter(n =&gt; !n.isRead).length;&#10;&#10;    const markAsRead = async (id: string, status: boolean) =&gt; {&#10;        try {&#10;            await notificationService.markAsRead(id, status);&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt;&#10;                    n.id === id ? {...n, isRead: status} : n&#10;                )&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark notification as read:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const deleteNotification = async (id: string) =&gt; {&#10;        try {&#10;            await notificationService.removeNotification(id);&#10;            setNotifications(notifications =&gt;&#10;                notifications.filter(n =&gt; n.id !== id)&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to delete notification:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const markAllAsRead = async () =&gt; {&#10;        try {&#10;            await notificationService.markAllNotificationsAsRead();&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt; ({...n, isRead: true}))&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark all notifications as read:&quot;, error);&#10;        }&#10;    };&#10;&#10;    useEffect(() =&gt; {&#10;        const wsService = new WebSocketService();&#10;&#10;        wsService.onNotification((notification) =&gt; {&#10;            setNotifications((prev) =&gt; [notification, ...prev]); // Add new notification at the top&#10;        });&#10;&#10;        wsService.connect();&#10;&#10;        // Fetch initial notifications&#10;        wsService.fetchInitialNotifications(&quot;desc&quot;).then((initialNotifications) =&gt; {&#10;            setNotifications(initialNotifications);&#10;        });&#10;&#10;        return () =&gt; {&#10;            wsService.disconnect();&#10;        };&#10;    }, [1]);&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                        &lt;h1 className=&quot;text-3xl font-bold text-foreground&quot;&gt;Notifications&lt;/h1&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {unreadCount &gt; 0 &amp;&amp; (&#10;                    &lt;Button onClick={markAllAsRead} variant=&quot;outline&quot;&gt;&#10;                        &lt;CheckCheck className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                        Mark All Read&#10;                    &lt;/Button&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;NotificationList&#10;                notifications={notifications}&#10;                actions={{&#10;                    markAsRead: markAsRead,&#10;                    remove: deleteNotification&#10;                }}&#10;            /&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import {Button} from &quot;@/components/ui/button&quot;&#10;import {CheckCheck} from &quot;lucide-react&quot;&#10;import type {Notification} from &quot;@/types/notification&quot;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import {notificationService} from &quot;@/lib/api-client&quot;&#10;import {NotificationList} from &quot;@/components/Notification/NotificationList&quot;&#10;import {WebSocketService} from &quot;@/lib/websocket&quot;;&#10;&#10;export default function NotificationsPage() {&#10;    const [notifications, setNotifications] = useState&lt;Notification[]&gt;([]);&#10;    const [loading, setLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Helper functions for notification actions&#10;    const unreadCount = notifications.filter(n =&gt; !n.isRead).length;&#10;&#10;    const markAsRead = async (id: string, status: boolean) =&gt; {&#10;        try {&#10;            await notificationService.markAsRead(id, status);&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt;&#10;                    n.id === id ? {...n, isRead: status} : n&#10;                )&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark notification as read:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const deleteNotification = async (id: string) =&gt; {&#10;        try {&#10;            await notificationService.removeNotification(id);&#10;            setNotifications(notifications =&gt;&#10;                notifications.filter(n =&gt; n.id !== id)&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to delete notification:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const markAllAsRead = async () =&gt; {&#10;        try {&#10;            await notificationService.markAllNotificationsAsRead();&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt; ({...n, isRead: true}))&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark all notifications as read:&quot;, error);&#10;        }&#10;    };&#10;&#10;    useEffect(() =&gt; {&#10;        const wsService = new WebSocketService();&#10;&#10;        wsService.onNotification((notification) =&gt; {&#10;            setNotifications((prev) =&gt; [notification, ...prev]); // Add new notification at the top&#10;        });&#10;&#10;        wsService.connect();&#10;&#10;        // Fetch initial notifications&#10;        wsService.fetchInitialNotifications(&quot;desc&quot;).then((initialNotifications) =&gt; {&#10;            setNotifications(initialNotifications);&#10;        });&#10;&#10;        return () =&gt; {&#10;            wsService.disconnect();&#10;        };&#10;    }, [1]);&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                        &lt;h1 className=&quot;text-3xl font-bold text-foreground&quot;&gt;Notifications&lt;/h1&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {unreadCount &gt; 0 &amp;&amp; (&#10;                    &lt;Button onClick={markAllAsRead} variant=&quot;outline&quot;&gt;&#10;                        &lt;CheckCheck className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                        Mark All Read&#10;                    &lt;/Button&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;NotificationList&#10;                notifications={notifications}&#10;                actions={{&#10;                    markAsRead: markAsRead,&#10;                    remove: deleteNotification&#10;                }}&#10;            /&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/admin/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import { StatsCard } from &quot;@/components/common/stats-card&quot;&#10;import { VolumeChart } from &quot;@/components/dashboard/volume-chart&quot;&#10;import { StatusPieChart } from &quot;@/components/dashboard/status-pie-chart&quot;&#10;import { TransactionsTable } from &quot;@/components/dashboard/transactions-table&quot;&#10;import { Users, CreditCard, DollarSign, Clock, Activity } from &quot;lucide-react&quot;&#10;&#10;// Mock data - will be replaced with real API calls&#10;const statsData = {&#10;  totalAccounts: 1247,&#10;  totalTransactions: 8934,&#10;  totalVolume: 2847392.5,&#10;  pendingTransactions: 23,&#10;  activeAccounts: 1189,&#10;}&#10;&#10;export default function AdminDashboard() {&#10;  return (&#10;    &lt;div className=&quot;space-y-6&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div&gt;&#10;        &lt;h1 className=&quot;text-3xl font-bold text-foreground&quot;&gt;Dashboard&lt;/h1&gt;&#10;        &lt;p className=&quot;text-muted-foreground&quot;&gt;Welcome back, Admin. Here's what's happening today.&lt;/p&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Stats Cards */}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4&quot;&gt;&#10;        &lt;StatsCard&#10;          title=&quot;Total Accounts&quot;&#10;          value={statsData.totalAccounts.toLocaleString()}&#10;          change=&quot;+12% from last month&quot;&#10;          changeType=&quot;positive&quot;&#10;          icon={Users}&#10;        /&gt;&#10;        &lt;StatsCard&#10;          title=&quot;Total Transactions&quot;&#10;          value={statsData.totalTransactions.toLocaleString()}&#10;          change=&quot;+8% from last month&quot;&#10;          changeType=&quot;positive&quot;&#10;          icon={CreditCard}&#10;        /&gt;&#10;        &lt;StatsCard&#10;          title=&quot;Total Volume&quot;&#10;          value={`$${(statsData.totalVolume / 1000000).toFixed(1)}M`}&#10;          change=&quot;+15% from last month&quot;&#10;          changeType=&quot;positive&quot;&#10;          icon={DollarSign}&#10;        /&gt;&#10;        &lt;StatsCard&#10;          title=&quot;Pending Transactions&quot;&#10;          value={statsData.pendingTransactions}&#10;          change=&quot;-5% from yesterday&quot;&#10;          changeType=&quot;positive&quot;&#10;          icon={Clock}&#10;        /&gt;&#10;        &lt;StatsCard&#10;          title=&quot;Active Accounts&quot;&#10;          value={statsData.activeAccounts.toLocaleString()}&#10;          change=&quot;+3% from last month&quot;&#10;          changeType=&quot;positive&quot;&#10;          icon={Activity}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Charts */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;        &lt;VolumeChart /&gt;&#10;        &lt;StatusPieChart /&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Recent Transactions */}&#10;      &lt;div&gt;&#10;        &lt;h2 className=&quot;text-xl font-semibold text-foreground mb-4&quot;&gt;Recent Transactions&lt;/h2&gt;&#10;        &lt;TransactionsTable /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { StatsCard } from &quot;@/components/common/stats-card&quot;&#10;import { VolumeChart } from &quot;@/components/dashboard/volume-chart&quot;&#10;import { StatusPieChart } from &quot;@/components/dashboard/status-pie-chart&quot;&#10;import { TransactionsTable } from &quot;@/components/dashboard/transactions-table&quot;&#10;import { Users, CreditCard, DollarSign, Clock, Activity } from &quot;lucide-react&quot;&#10;&#10;// Mock data - will be replaced with real API calls&#10;const statsData = {&#10;  totalAccounts: 1247,&#10;  totalTransactions: 8934,&#10;  totalVolume: 2847392.5,&#10;  pendingTransactions: 23,&#10;  activeAccounts: 1189,&#10;}&#10;&#10;export default function AdminDashboard() {&#10;  // Test function to simulate new notification for testing&#10;  const testNotificationAlert = () =&gt; {&#10;    const mockNotification = {&#10;      id: &quot;test-&quot; + Date.now(),&#10;      title: &quot;Test Notification&quot;,&#10;      message: &quot;This is a test notification to verify toast alerts are working in admin&quot;,&#10;      type: &quot;info&quot; as const,&#10;      isRead: false,&#10;      timestamp: new Date().toISOString()&#10;    }&#10;    &#10;    // Import and use the notification alert function&#10;    import(&quot;@/components/common/notification-alert&quot;).then(({ showBankNotificationAlert }) =&gt; {&#10;      showBankNotificationAlert(mockNotification)&#10;    })&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;space-y-6&quot;&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        &lt;div&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-foreground&quot;&gt;Dashboard&lt;/h1&gt;&#10;          &lt;p className=&quot;text-muted-foreground&quot;&gt;Welcome back, Admin. Here's what's happening today.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;        &#10;        {/* Test button for notification alerts */}&#10;        &lt;button &#10;          onClick={testNotificationAlert}&#10;          className=&quot;px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600&quot;&#10;        &gt;&#10;          Test Notification Alert&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Stats Cards */}&#10;      &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4&quot;&gt;&#10;        &lt;StatsCard&#10;          title=&quot;Total Accounts&quot;&#10;          value={statsData.totalAccounts.toLocaleString()}&#10;          change=&quot;+12% from last month&quot;&#10;          changeType=&quot;positive&quot;&#10;          icon={Users}&#10;        /&gt;&#10;        &lt;StatsCard&#10;          title=&quot;Total Transactions&quot;&#10;          value={statsData.totalTransactions.toLocaleString()}&#10;          change=&quot;+8% from last month&quot;&#10;          changeType=&quot;positive&quot;&#10;          icon={CreditCard}&#10;        /&gt;&#10;        &lt;StatsCard&#10;          title=&quot;Total Volume&quot;&#10;          value={`$${(statsData.totalVolume / 1000000).toFixed(1)}M`}&#10;          change=&quot;+15% from last month&quot;&#10;          changeType=&quot;positive&quot;&#10;          icon={DollarSign}&#10;        /&gt;&#10;        &lt;StatsCard&#10;          title=&quot;Pending Transactions&quot;&#10;          value={statsData.pendingTransactions}&#10;          change=&quot;-5% from yesterday&quot;&#10;          changeType=&quot;positive&quot;&#10;          icon={Clock}&#10;        /&gt;&#10;        &lt;StatsCard&#10;          title=&quot;Active Accounts&quot;&#10;          value={statsData.activeAccounts.toLocaleString()}&#10;          change=&quot;+3% from last month&quot;&#10;          changeType=&quot;positive&quot;&#10;          icon={Activity}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Charts */}&#10;      &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;        &lt;VolumeChart /&gt;&#10;        &lt;StatusPieChart /&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Recent Transactions */}&#10;      &lt;div&gt;&#10;        &lt;h2 className=&quot;text-xl font-semibold text-foreground mb-4&quot;&gt;Recent Transactions&lt;/h2&gt;&#10;        &lt;TransactionsTable /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/accounts/[accountNumber]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/accounts/[accountNumber]/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/[id]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/[id]/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/[id]/status/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/[id]/status/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/providers.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/providers.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import type React from &quot;react&quot;&#10;&#10;import { QueryClient, QueryClientProvider } from &quot;@tanstack/react-query&quot;&#10;import { Toaster as HotToaster } from &quot;react-hot-toast&quot;&#10;import { Toaster } from &quot;@/components/ui/toaster&quot;&#10;import { useState } from &quot;react&quot;&#10;&#10;export function Providers({ children }: { children: React.ReactNode }) {&#10;  const [queryClient] = useState(&#10;    () =&gt;&#10;      new QueryClient({&#10;        defaultOptions: {&#10;          queries: {&#10;            staleTime: 60 * 1000, // 1 minute&#10;            refetchOnWindowFocus: false,&#10;          },&#10;        },&#10;      }),&#10;  )&#10;&#10;  return (&#10;    &lt;QueryClientProvider client={queryClient}&gt;&#10;      {children}&#10;      {/* Shadcn/ui Toaster for bank-style notification alerts */}&#10;      &lt;Toaster /&gt;&#10;      {/* Keep existing hot toast for other notifications - positioned differently */}&#10;      &lt;HotToaster&#10;        position=&quot;bottom-right&quot;&#10;        toastOptions={{&#10;          duration: 4000,&#10;          style: {&#10;            background: &quot;var(--color-card)&quot;,&#10;            color: &quot;var(--color-card-foreground)&quot;,&#10;            border: &quot;1px solid var(--color-border)&quot;,&#10;          },&#10;          success: {&#10;            iconTheme: {&#10;              primary: &quot;var(--color-success)&quot;,&#10;              secondary: &quot;var(--color-success-foreground)&quot;,&#10;            },&#10;          },&#10;          error: {&#10;            iconTheme: {&#10;              primary: &quot;var(--color-destructive)&quot;,&#10;              secondary: &quot;var(--color-destructive-foreground)&quot;,&#10;            },&#10;          },&#10;        }}&#10;      /&gt;&#10;    &lt;/QueryClientProvider&gt;&#10;  )&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import type React from &quot;react&quot;&#10;&#10;import { QueryClient, QueryClientProvider } from &quot;@tanstack/react-query&quot;&#10;import { Toaster as HotToaster } from &quot;react-hot-toast&quot;&#10;import { Toaster } from &quot;@/components/ui/toaster&quot;&#10;import { useState } from &quot;react&quot;&#10;&#10;export function Providers({ children }: { children: React.ReactNode }) {&#10;  const [queryClient] = useState(&#10;    () =&gt;&#10;      new QueryClient({&#10;        defaultOptions: {&#10;          queries: {&#10;            staleTime: 60 * 1000, // 1 minute&#10;            refetchOnWindowFocus: false,&#10;          },&#10;        },&#10;      }),&#10;  )&#10;&#10;  return (&#10;    &lt;QueryClientProvider client={queryClient}&gt;&#10;      {children}&#10;      {/* Shadcn/ui Toaster for bank-style notification alerts - positioned at top-right */}&#10;      &lt;Toaster /&gt;&#10;      {/* React-hot-toast for other notifications (payments, etc.) - moved to top-right */}&#10;      &lt;HotToaster&#10;        position=&quot;top-right&quot;&#10;        toastOptions={{&#10;          duration: 4000,&#10;          style: {&#10;            background: &quot;var(--color-card)&quot;,&#10;            color: &quot;var(--color-card-foreground)&quot;,&#10;            border: &quot;1px solid var(--color-border)&quot;,&#10;          },&#10;          success: {&#10;            iconTheme: {&#10;              primary: &quot;var(--color-success)&quot;,&#10;              secondary: &quot;var(--color-success-foreground)&quot;,&#10;            },&#10;          },&#10;          error: {&#10;            iconTheme: {&#10;              primary: &quot;var(--color-destructive)&quot;,&#10;              secondary: &quot;var(--color-destructive-foreground)&quot;,&#10;            },&#10;          },&#10;        }}&#10;      /&gt;&#10;    &lt;/QueryClientProvider&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/common/admin-notification-handler.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/common/admin-notification-handler.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import { useEffect } from &quot;react&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import { showBankNotificationAlert } from &quot;./notification-alert&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;export const AdminNotificationHandler = () =&gt; {&#10;  useEffect(() =&gt; {&#10;    console.log('Admin notification handler initialized')&#10;    const wsService = new WebSocketService()&#10;&#10;    // Set up WebSocket event handlers for admin pages only&#10;    wsService.onNotification((notification: Notification) =&gt; {&#10;      console.log('Admin: New notification received', notification)&#10;      // Show bank-style alert for new notification in admin&#10;      showBankNotificationAlert(notification)&#10;    })&#10;&#10;    // Handle connection status&#10;    wsService.onConnect(() =&gt; {&#10;      console.log('Admin: Connected to WebSocket for notifications')&#10;    })&#10;&#10;    wsService.onDisconnect(() =&gt; {&#10;      console.log('Admin: Disconnected from WebSocket')&#10;    })&#10;&#10;    // Connect to WebSocket&#10;    wsService.connect()&#10;&#10;    return () =&gt; {&#10;      console.log('Admin notification handler cleanup')&#10;      wsService.disconnect()&#10;    }&#10;  }, [])&#10;&#10;  // This component doesn't render anything visible&#10;  return null&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import { useEffect } from &quot;react&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import { showBankNotificationAlert, showBankNotificationSummary } from &quot;./notification-alert&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;export const AdminNotificationHandler = () =&gt; {&#10;  useEffect(() =&gt; {&#10;    console.log('Admin notification handler initialized')&#10;    &#10;    // Create a single WebSocket connection for admin&#10;    const wsService = new WebSocketService()&#10;&#10;    // Set up WebSocket event handlers for admin pages&#10;    wsService.onNotification((notification: Notification) =&gt; {&#10;      console.log('Admin: New notification received', notification)&#10;      &#10;      // Show bank-style alert for new notification in admin&#10;      showBankNotificationAlert(notification)&#10;      &#10;      // Also show the &quot;new notifications&quot; summary&#10;      showBankNotificationSummary(1, 'newNotifications')&#10;    })&#10;&#10;    // Handle connection status&#10;    wsService.onConnect(() =&gt; {&#10;      console.log('Admin: Connected to WebSocket for notifications')&#10;    })&#10;&#10;    wsService.onDisconnect(() =&gt; {&#10;      console.log('Admin: Disconnected from WebSocket')&#10;    })&#10;&#10;    // Connect to WebSocket&#10;    wsService.connect()&#10;&#10;    return () =&gt; {&#10;      console.log('Admin notification handler cleanup')&#10;      wsService.disconnect()&#10;    }&#10;  }, [])&#10;&#10;  // This component doesn't render anything visible&#10;  return null&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/common/notification-alert.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/common/notification-alert.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import React from &quot;react&quot;&#10;import { Bell, CheckCircle, AlertTriangle, Info, XCircle, CreditCard, ArrowUpRight, ArrowDownLeft } from &quot;lucide-react&quot;&#10;import { useToast } from &quot;@/hooks/use-toast&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;// Bank-style notification icons based on type and content&#10;const getNotificationIcon = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;&#10;  // Check for banking-specific keywords&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return &lt;ArrowUpRight className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return &lt;ArrowDownLeft className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return &lt;CreditCard className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;&#10;  // Fallback to type-based icons&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;    case &quot;warning&quot;:&#10;      return &lt;AlertTriangle className=&quot;h-5 w-5 text-yellow-500&quot; /&gt;&#10;    case &quot;error&quot;:&#10;      return &lt;XCircle className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;    default:&#10;      return &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;}&#10;&#10;// Get notification styling based on type&#10;const getNotificationStyle = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;    }&#10;  }&#10;&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;      }&#10;    case &quot;warning&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;&#10;      }&#10;    case &quot;error&quot;:&#10;      return {&#10;        variant: &quot;destructive&quot; as const,&#10;        className: &quot;border-l-4 border-l-red-500&quot;&#10;      }&#10;    default:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;      }&#10;  }&#10;}&#10;&#10;// Format amount for banking notifications&#10;const formatAmount = (text: string) =&gt; {&#10;  const amountMatch = text.match(/\$?([0-9,]+\.?[0-9]*)/g)&#10;  if (amountMatch) {&#10;    return text.replace(/\$?([0-9,]+\.?[0-9]*)/g, (match) =&gt; {&#10;      const cleanAmount = match.replace(/[$,]/g, '')&#10;      return `$${parseFloat(cleanAmount).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`&#10;    })&#10;  }&#10;  return text&#10;}&#10;&#10;export const showBankNotificationAlert = (notification: Notification) =&gt; {&#10;  const { toast } = useToast()&#10;  const icon = getNotificationIcon(notification)&#10;  const style = getNotificationStyle(notification)&#10;&#10;  toast({&#10;    ...style,&#10;    duration: 8000, // 8 seconds for bank notifications&#10;    title: (&#10;      &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;        {icon}&#10;        &lt;span className=&quot;font-semibold&quot;&gt;{notification.title}&lt;/span&gt;&#10;      &lt;/div&gt;&#10;    ),&#10;    description: (&#10;      &lt;div className=&quot;mt-1&quot;&gt;&#10;        &lt;p className=&quot;text-sm&quot;&gt;{formatAmount(notification.message)}&lt;/p&gt;&#10;        &lt;p className=&quot;text-xs text-muted-foreground mt-1&quot;&gt;&#10;          {new Date(notification.timestamp).toLocaleTimeString('en-US', {&#10;            hour: '2-digit',&#10;            minute: '2-digit',&#10;            hour12: true&#10;          })}&#10;        &lt;/p&gt;&#10;      &lt;/div&gt;&#10;    ),&#10;  })&#10;}&#10;&#10;// Show multiple notifications as a summary (for bulk updates)&#10;export const showBankNotificationSummary = (count: number, type: 'markRead' | 'newNotifications') =&gt; {&#10;  const { toast } = useToast()&#10;  const icon = type === 'markRead'&#10;    ? &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;    : &lt;Bell className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;&#10;  const title = type === 'markRead'&#10;    ? &quot;Notifications Updated&quot;&#10;    : &quot;New Notifications&quot;&#10;&#10;  const message = type === 'markRead'&#10;    ? `${count} notification${count &gt; 1 ? 's' : ''} marked as read`&#10;    : `${count} new notification${count &gt; 1 ? 's' : ''} received`&#10;&#10;  toast({&#10;    variant: &quot;default&quot;,&#10;    className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;    duration: 4000,&#10;    title: (&#10;      &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;        {icon}&#10;        &lt;span className=&quot;font-semibold&quot;&gt;{title}&lt;/span&gt;&#10;      &lt;/div&gt;&#10;    ),&#10;    description: &lt;p className=&quot;text-sm&quot;&gt;{message}&lt;/p&gt;,&#10;  })&#10;}&#10;&#10;// Admin-specific alerts for various actions&#10;export const showAdminAlert = {&#10;  success: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Success&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  error: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;destructive&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;XCircle className=&quot;h-5 w-5&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Error&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 6000,&#10;    })&#10;  },&#10;&#10;  warning: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;AlertTriangle className=&quot;h-5 w-5 text-yellow-500&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Warning&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 5000,&#10;    })&#10;  },&#10;&#10;  info: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;      title: (&#10;        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;          &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;          &lt;span className=&quot;font-semibold&quot;&gt;Info&lt;/span&gt;&#10;        &lt;/div&gt;&#10;      ),&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  // Banking-specific alerts&#10;  transaction: {&#10;    created: (amount: string, recipient?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;ArrowUpRight className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Transaction Created&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Successfully sent ${amount}${recipient ? ` to ${recipient}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    received: (amount: string, sender?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;ArrowDownLeft className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Payment Received&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Received ${amount}${sender ? ` from ${sender}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    failed: (reason?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;destructive&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;XCircle className=&quot;h-5 w-5&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Transaction Failed&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: reason || &quot;Transaction could not be processed&quot;,&#10;        duration: 8000,&#10;      })&#10;    }&#10;  },&#10;&#10;  account: {&#10;    created: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Account Created&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `New account ${accountNumber} has been successfully created`,&#10;        duration: 5000,&#10;      })&#10;    },&#10;&#10;    updated: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Account Updated&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Account ${accountNumber} has been updated`,&#10;        duration: 4000,&#10;      })&#10;    },&#10;&#10;    blocked: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;,&#10;        title: (&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;AlertTriangle className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;            &lt;span className=&quot;font-semibold&quot;&gt;Account Blocked&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        ),&#10;        description: `Account ${accountNumber} has been blocked`,&#10;        duration: 6000,&#10;      })&#10;    }&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import React from &quot;react&quot;&#10;import { Bell, CheckCircle, AlertTriangle, Info, XCircle, CreditCard, ArrowUpRight, ArrowDownLeft } from &quot;lucide-react&quot;&#10;import { useToast } from &quot;@/hooks/use-toast&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;// Bank-style notification icons based on type and content&#10;const getNotificationIcon = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;&#10;  // Check for banking-specific keywords&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return &lt;ArrowUpRight className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return &lt;ArrowDownLeft className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return &lt;CreditCard className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;&#10;  // Fallback to type-based icons&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return &lt;CheckCircle className=&quot;h-5 w-5 text-green-500&quot; /&gt;&#10;    case &quot;warning&quot;:&#10;      return &lt;AlertTriangle className=&quot;h-5 w-5 text-yellow-500&quot; /&gt;&#10;    case &quot;error&quot;:&#10;      return &lt;XCircle className=&quot;h-5 w-5 text-red-500&quot; /&gt;&#10;    default:&#10;      return &lt;Info className=&quot;h-5 w-5 text-blue-500&quot; /&gt;&#10;  }&#10;}&#10;&#10;// Get notification styling based on type&#10;const getNotificationStyle = (notification: Notification) =&gt; {&#10;  const { type, title, message } = notification&#10;  const content = `${title} ${message}`.toLowerCase()&#10;&#10;  if (content.includes('transfer') || content.includes('sent')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('received') || content.includes('deposit')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;    }&#10;  }&#10;  if (content.includes('payment') || content.includes('card')) {&#10;    return {&#10;      variant: &quot;default&quot; as const,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;    }&#10;  }&#10;&#10;  switch (type) {&#10;    case &quot;success&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;&#10;      }&#10;    case &quot;warning&quot;:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;&#10;      }&#10;    case &quot;error&quot;:&#10;      return {&#10;        variant: &quot;destructive&quot; as const,&#10;        className: &quot;border-l-4 border-l-red-500&quot;&#10;      }&#10;    default:&#10;      return {&#10;        variant: &quot;default&quot; as const,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;&#10;      }&#10;  }&#10;}&#10;&#10;// Format amount for banking notifications&#10;const formatAmount = (text: string) =&gt; {&#10;  const amountMatch = text.match(/\$?([0-9,]+\.?[0-9]*)/g)&#10;  if (amountMatch) {&#10;    return text.replace(/\$?([0-9,]+\.?[0-9]*)/g, (match) =&gt; {&#10;      const cleanAmount = match.replace(/[$,]/g, '')&#10;      return `$${parseFloat(cleanAmount).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`&#10;    })&#10;  }&#10;  return text&#10;}&#10;&#10;export const showBankNotificationAlert = (notification: Notification) =&gt; {&#10;  const { toast } = useToast()&#10;  const icon = getNotificationIcon(notification)&#10;  const style = getNotificationStyle(notification)&#10;&#10;  toast({&#10;    ...style,&#10;    duration: 8000, // 8 seconds for bank notifications&#10;    title: notification.title,&#10;    description: formatAmount(notification.message),&#10;  })&#10;}&#10;&#10;// Show multiple notifications as a summary (for bulk updates)&#10;export const showBankNotificationSummary = (count: number, type: 'markRead' | 'newNotifications') =&gt; {&#10;  const { toast } = useToast()&#10;&#10;  const title = type === 'markRead'&#10;    ? &quot;Notifications Updated&quot;&#10;    : &quot;New Notifications&quot;&#10;&#10;  const message = type === 'markRead'&#10;    ? `${count} notification${count &gt; 1 ? 's' : ''} marked as read`&#10;    : `${count} new notification${count &gt; 1 ? 's' : ''} received`&#10;&#10;  toast({&#10;    variant: &quot;default&quot;,&#10;    className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;    duration: 4000,&#10;    title: title,&#10;    description: message,&#10;  })&#10;}&#10;&#10;// Admin-specific alerts for various actions&#10;export const showAdminAlert = {&#10;  success: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;      title: &quot;Success&quot;,&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  error: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;destructive&quot;,&#10;      title: &quot;Error&quot;,&#10;      description: message,&#10;      duration: 6000,&#10;    })&#10;  },&#10;&#10;  warning: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20&quot;,&#10;      title: &quot;Warning&quot;,&#10;      description: message,&#10;      duration: 5000,&#10;    })&#10;  },&#10;&#10;  info: (message: string) =&gt; {&#10;    const { toast } = useToast()&#10;    toast({&#10;      variant: &quot;default&quot;,&#10;      className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;      title: &quot;Info&quot;,&#10;      description: message,&#10;      duration: 4000,&#10;    })&#10;  },&#10;&#10;  // Banking-specific alerts&#10;  transaction: {&#10;    created: (amount: string, recipient?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: &quot;Transaction Created&quot;,&#10;        description: `Successfully sent ${amount}${recipient ? ` to ${recipient}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    received: (amount: string, sender?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: &quot;Payment Received&quot;,&#10;        description: `Received ${amount}${sender ? ` from ${sender}` : ''}`,&#10;        duration: 6000,&#10;      })&#10;    },&#10;&#10;    failed: (reason?: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;destructive&quot;,&#10;        title: &quot;Transaction Failed&quot;,&#10;        description: reason || &quot;Transaction could not be processed&quot;,&#10;        duration: 8000,&#10;      })&#10;    }&#10;  },&#10;&#10;  account: {&#10;    created: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-green-500 bg-green-50 dark:bg-green-950/20&quot;,&#10;        title: &quot;Account Created&quot;,&#10;        description: `New account ${accountNumber} has been successfully created`,&#10;        duration: 5000,&#10;      })&#10;    },&#10;&#10;    updated: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-950/20&quot;,&#10;        title: &quot;Account Updated&quot;,&#10;        description: `Account ${accountNumber} has been updated`,&#10;        duration: 4000,&#10;      })&#10;    },&#10;&#10;    blocked: (accountNumber: string) =&gt; {&#10;      const { toast } = useToast()&#10;      toast({&#10;        variant: &quot;default&quot;,&#10;        className: &quot;border-l-4 border-l-red-500 bg-red-50 dark:bg-red-950/20&quot;,&#10;        title: &quot;Account Blocked&quot;,&#10;        description: `Account ${accountNumber} has been blocked`,&#10;        duration: 6000,&#10;      })&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/common/notification-bell.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/common/notification-bell.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import React, {useEffect, useState} from &quot;react&quot;&#10;import { Bell } from &quot;lucide-react&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Badge } from &quot;@/components/ui/badge&quot;&#10;import {&#10;  DropdownMenu,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuLabel,&#10;  DropdownMenuSeparator,&#10;  DropdownMenuTrigger,&#10;} from &quot;@/components/ui/dropdown-menu&quot;&#10;import { formatRelativeTime } from &quot;@/utils/format&quot;&#10;import { ScrollArea } from &quot;@/components/ui/scroll-area&quot;&#10;import { notificationService } from &quot;@/lib/api-client&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;&#10;export const NotificationBell = React.memo(() =&gt; {&#10;    const [notifications, setNotifications] = useState&lt;Notification[]&gt;([])&#10;    const [isConnected, setIsConnected] = useState(false)&#10;&#10;    // Count unread notifications&#10;    const unreadCount = notifications.filter(n =&gt; !n.isRead).length&#10;&#10;    // Mark a single notification as read&#10;    const markAsRead = async (id: string) =&gt; {&#10;        try {&#10;            await notificationService.markAsRead(id, true)&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt;&#10;                    n.id === id ? { ...n, isRead: true } : n&#10;                )&#10;            )&#10;&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark notification as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Mark all notifications as read&#10;    const markAllAsRead = async () =&gt; {&#10;        try {&#10;            const unreadNotifications = notifications.filter(n =&gt; !n.isRead)&#10;            const count = unreadNotifications.length&#10;&#10;            await notificationService.markAllNotificationsAsRead()&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt; ({ ...n, isRead: true }))&#10;            )&#10;&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark all notifications as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    useEffect(() =&gt; {&#10;        // Check if we're in admin pages to avoid duplicate WebSocket connections&#10;        const isAdminPage = window.location.pathname.startsWith('/admin')&#10;&#10;        if (!isAdminPage) {&#10;            // Only create WebSocket connection if NOT in admin pages&#10;            const wsService = new WebSocketService()&#10;&#10;            wsService.onNotification((notification: Notification) =&gt; {&#10;                setNotifications(prev =&gt; [notification, ...prev])&#10;            })&#10;&#10;            wsService.onConnect(() =&gt; {&#10;                console.log('NotificationBell: Connected to WebSocket')&#10;                setIsConnected(true)&#10;            })&#10;&#10;            wsService.onDisconnect(() =&gt; {&#10;                console.log('NotificationBell: Disconnected from WebSocket')&#10;                setIsConnected(false)&#10;            })&#10;&#10;            wsService.connect()&#10;&#10;            // Fetch initial notifications&#10;            wsService.fetchInitialNotifications(&quot;desc&quot;).then((initialNotifications: Notification[]) =&gt; {&#10;                setNotifications(initialNotifications)&#10;            }).catch((error) =&gt; {&#10;                console.error(&quot;Failed to fetch initial notifications:&quot;, error)&#10;            })&#10;&#10;            return () =&gt; {&#10;                wsService.disconnect()&#10;            }&#10;        } else {&#10;            // In admin pages, just fetch initial notifications without WebSocket&#10;            notificationService.getNotifications().then((initialNotifications: Notification[]) =&gt; {&#10;                setNotifications(initialNotifications.sort((a, b) =&gt;&#10;                    new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()&#10;                ))&#10;                setIsConnected(true) // Assume connected in admin&#10;            }).catch((error) =&gt; {&#10;                console.error(&quot;Failed to fetch initial notifications:&quot;, error)&#10;            })&#10;        }&#10;    }, [])&#10;&#10;    const recentNotifications = React.useMemo(() =&gt; notifications.slice(0, 5), [notifications])&#10;&#10;    return (&#10;        &lt;DropdownMenu&gt;&#10;            &lt;DropdownMenuTrigger asChild&gt;&#10;                &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; className=&quot;relative&quot;&gt;&#10;                    &lt;Bell className=&quot;h-5 w-5&quot; /&gt;&#10;                    {unreadCount &gt; 0 &amp;&amp; (&#10;                        &lt;Badge&#10;                            variant=&quot;destructive&quot;&#10;                            className=&quot;absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs animate-pulse&quot;&#10;                        &gt;&#10;                            {unreadCount &gt; 99 ? &quot;99+&quot; : unreadCount}&#10;                        &lt;/Badge&gt;&#10;                    )}&#10;                    {!isConnected &amp;&amp; (&#10;                        &lt;div className=&quot;absolute -bottom-1 -right-1 w-2 h-2 bg-yellow-500 rounded-full animate-pulse&quot; /&gt;&#10;                    )}&#10;                &lt;/Button&gt;&#10;            &lt;/DropdownMenuTrigger&gt;&#10;&#10;            &lt;DropdownMenuContent className=&quot;w-80&quot; align=&quot;end&quot; forceMount&gt;&#10;                &lt;DropdownMenuLabel className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;span&gt;Notifications&lt;/span&gt;&#10;                    {unreadCount &gt; 0 &amp;&amp; (&#10;                        &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={markAllAsRead} className=&quot;text-xs h-6 hover:bg-primary/10&quot;&gt;&#10;                            Mark all read ({unreadCount})&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/DropdownMenuLabel&gt;&#10;&#10;                &lt;DropdownMenuSeparator /&gt;&#10;&#10;                {recentNotifications.length &gt; 0 ? (&#10;                    &lt;ScrollArea className=&quot;h-80&quot;&gt;&#10;                        {recentNotifications.map((notification) =&gt; (&#10;                            &lt;DropdownMenuItem&#10;                                key={notification.id}&#10;                                className={`flex flex-col items-start p-3 cursor-pointer transition-colors ${&#10;                                    !notification.isRead &#10;                                        ? &quot;bg-primary/5 hover:bg-primary/10 border-l-2 border-l-primary&quot; &#10;                                        : &quot;hover:bg-muted/50&quot;&#10;                                }`}&#10;                                onClick={() =&gt; !notification.isRead &amp;&amp; markAsRead(notification.id)}&#10;                            &gt;&#10;                                &lt;div className=&quot;flex items-start justify-between w-full&quot;&gt;&#10;                                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                            &lt;span&#10;                                                className={`font-medium text-sm ${&#10;                                                    !notification.isRead &#10;                                                        ? &quot;text-foreground&quot; &#10;                                                        : &quot;text-muted-foreground&quot;&#10;                                                }`}&#10;                                            &gt;&#10;                                                {notification.title}&#10;                                            &lt;/span&gt;&#10;                                            {!notification.isRead &amp;&amp; (&#10;                                                &lt;div className=&quot;w-2 h-2 bg-primary rounded-full animate-pulse&quot; /&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;                                        &lt;p className=&quot;text-xs text-muted-foreground mt-1 line-clamp-2&quot;&gt;&#10;                                            {notification.message}&#10;                                        &lt;/p&gt;&#10;                                        &lt;p className=&quot;text-xs text-muted-foreground mt-1&quot;&gt;&#10;                                            {formatRelativeTime(notification.timestamp)}&#10;                                        &lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/DropdownMenuItem&gt;&#10;                        ))}&#10;                    &lt;/ScrollArea&gt;&#10;                ) : (&#10;                    &lt;div className=&quot;p-4 text-center text-muted-foreground&quot;&gt;&#10;                        &lt;Bell className=&quot;h-8 w-8 mx-auto mb-2 opacity-50&quot; /&gt;&#10;                        &lt;p className=&quot;text-sm&quot;&gt;No notifications&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                &lt;DropdownMenuSeparator /&gt;&#10;&#10;                &lt;DropdownMenuItem className=&quot;text-center justify-center&quot;&gt;&#10;                    &lt;a href=&quot;/admin/notifications&quot; className=&quot;text-sm text-primary hover:underline&quot;&gt;&#10;                        View all notifications&#10;                    &lt;/a&gt;&#10;                &lt;/DropdownMenuItem&gt;&#10;            &lt;/DropdownMenuContent&gt;&#10;        &lt;/DropdownMenu&gt;&#10;    )&#10;})&#10;&#10;NotificationBell.displayName = &quot;NotificationBell&quot;&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import React, {useEffect, useState} from &quot;react&quot;&#10;import { Bell } from &quot;lucide-react&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Badge } from &quot;@/components/ui/badge&quot;&#10;import {&#10;  DropdownMenu,&#10;  DropdownMenuContent,&#10;  DropdownMenuItem,&#10;  DropdownMenuLabel,&#10;  DropdownMenuSeparator,&#10;  DropdownMenuTrigger,&#10;} from &quot;@/components/ui/dropdown-menu&quot;&#10;import { formatRelativeTime } from &quot;@/utils/format&quot;&#10;import { ScrollArea } from &quot;@/components/ui/scroll-area&quot;&#10;import { notificationService } from &quot;@/lib/api-client&quot;&#10;import { WebSocketService } from &quot;@/lib/websocket&quot;&#10;import type { Notification } from &quot;@/types/notification&quot;&#10;&#10;&#10;export const NotificationBell = React.memo(() =&gt; {&#10;    const [notifications, setNotifications] = useState&lt;Notification[]&gt;([])&#10;    const [isConnected, setIsConnected] = useState(false)&#10;&#10;    // Count unread notifications&#10;    const unreadCount = notifications.filter(n =&gt; !n.isRead).length&#10;&#10;    // Mark a single notification as read&#10;    const markAsRead = async (id: string) =&gt; {&#10;        try {&#10;            await notificationService.markAsRead(id, true)&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt;&#10;                    n.id === id ? { ...n, isRead: true } : n&#10;                )&#10;            )&#10;&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark notification as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    // Mark all notifications as read&#10;    const markAllAsRead = async () =&gt; {&#10;        try {&#10;            const unreadNotifications = notifications.filter(n =&gt; !n.isRead)&#10;            const count = unreadNotifications.length&#10;&#10;            await notificationService.markAllNotificationsAsRead()&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt; ({ ...n, isRead: true }))&#10;            )&#10;&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark all notifications as read:&quot;, error)&#10;        }&#10;    }&#10;&#10;    useEffect(() =&gt; {&#10;        // Check if we're in admin pages to avoid duplicate WebSocket connections&#10;        const isAdminPage = window.location.pathname.startsWith('/admin')&#10;&#10;        if (!isAdminPage) {&#10;            // Only create WebSocket connection if NOT in admin pages&#10;            const wsService = new WebSocketService()&#10;&#10;            wsService.onNotification((notification: Notification) =&gt; {&#10;                setNotifications(prev =&gt; [notification, ...prev])&#10;            })&#10;&#10;            wsService.onConnect(() =&gt; {&#10;                console.log('NotificationBell: Connected to WebSocket')&#10;                setIsConnected(true)&#10;            })&#10;&#10;            wsService.onDisconnect(() =&gt; {&#10;                console.log('NotificationBell: Disconnected from WebSocket')&#10;                setIsConnected(false)&#10;            })&#10;&#10;            wsService.connect()&#10;&#10;            // Fetch initial notifications&#10;            wsService.fetchInitialNotifications(&quot;desc&quot;).then((initialNotifications: Notification[]) =&gt; {&#10;                setNotifications(initialNotifications)&#10;            }).catch((error) =&gt; {&#10;                console.error(&quot;Failed to fetch initial notifications:&quot;, error)&#10;            })&#10;&#10;            return () =&gt; {&#10;                wsService.disconnect()&#10;            }&#10;        } else {&#10;            // In admin pages, just fetch initial notifications without WebSocket&#10;            notificationService.getNotifications().then((initialNotifications: Notification[]) =&gt; {&#10;                setNotifications(initialNotifications.sort((a, b) =&gt;&#10;                    new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()&#10;                ))&#10;                setIsConnected(true) // Assume connected in admin&#10;            }).catch((error) =&gt; {&#10;                console.error(&quot;Failed to fetch initial notifications:&quot;, error)&#10;            })&#10;        }&#10;    }, [])&#10;&#10;    const recentNotifications = React.useMemo(() =&gt; notifications.slice(0, 5), [notifications])&#10;&#10;    return (&#10;        &lt;DropdownMenu&gt;&#10;            &lt;DropdownMenuTrigger asChild&gt;&#10;                &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; className=&quot;relative&quot;&gt;&#10;                    &lt;Bell className=&quot;h-5 w-5&quot; /&gt;&#10;                    {unreadCount &gt; 0 &amp;&amp; (&#10;                        &lt;Badge&#10;                            variant=&quot;destructive&quot;&#10;                            className=&quot;absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs animate-pulse&quot;&#10;                        &gt;&#10;                            {unreadCount &gt; 99 ? &quot;99+&quot; : unreadCount}&#10;                        &lt;/Badge&gt;&#10;                    )}&#10;                    {!isConnected &amp;&amp; (&#10;                        &lt;div className=&quot;absolute -bottom-1 -right-1 w-2 h-2 bg-yellow-500 rounded-full animate-pulse&quot; /&gt;&#10;                    )}&#10;                &lt;/Button&gt;&#10;            &lt;/DropdownMenuTrigger&gt;&#10;&#10;            &lt;DropdownMenuContent className=&quot;w-80&quot; align=&quot;end&quot; forceMount&gt;&#10;                &lt;DropdownMenuLabel className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;span&gt;Notifications&lt;/span&gt;&#10;                    {unreadCount &gt; 0 &amp;&amp; (&#10;                        &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={markAllAsRead} className=&quot;text-xs h-6 hover:bg-primary/10&quot;&gt;&#10;                            Mark all read ({unreadCount})&#10;                        &lt;/Button&gt;&#10;                    )}&#10;                &lt;/DropdownMenuLabel&gt;&#10;&#10;                &lt;DropdownMenuSeparator /&gt;&#10;&#10;                {recentNotifications.length &gt; 0 ? (&#10;                    &lt;ScrollArea className=&quot;h-80&quot;&gt;&#10;                        {recentNotifications.map((notification) =&gt; (&#10;                            &lt;DropdownMenuItem&#10;                                key={notification.id}&#10;                                className={`flex flex-col items-start p-3 cursor-pointer transition-colors ${&#10;                                    !notification.isRead &#10;                                        ? &quot;bg-primary/5 hover:bg-primary/10 border-l-2 border-l-primary&quot; &#10;                                        : &quot;hover:bg-muted/50&quot;&#10;                                }`}&#10;                                onClick={() =&gt; !notification.isRead &amp;&amp; markAsRead(notification.id)}&#10;                            &gt;&#10;                                &lt;div className=&quot;flex items-start justify-between w-full&quot;&gt;&#10;                                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                                            &lt;span&#10;                                                className={`font-medium text-sm ${&#10;                                                    !notification.isRead &#10;                                                        ? &quot;text-foreground&quot; &#10;                                                        : &quot;text-muted-foreground&quot;&#10;                                                }`}&#10;                                            &gt;&#10;                                                {notification.title}&#10;                                            &lt;/span&gt;&#10;                                            {!notification.isRead &amp;&amp; (&#10;                                                &lt;div className=&quot;w-2 h-2 bg-primary rounded-full animate-pulse&quot; /&gt;&#10;                                            )}&#10;                                        &lt;/div&gt;&#10;                                        &lt;p className=&quot;text-xs text-muted-foreground mt-1 line-clamp-2&quot;&gt;&#10;                                            {notification.message}&#10;                                        &lt;/p&gt;&#10;                                        &lt;p className=&quot;text-xs text-muted-foreground mt-1&quot;&gt;&#10;                                            {formatRelativeTime(notification.timestamp)}&#10;                                        &lt;/p&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/DropdownMenuItem&gt;&#10;                        ))}&#10;                    &lt;/ScrollArea&gt;&#10;                ) : (&#10;                    &lt;div className=&quot;p-4 text-center text-muted-foreground&quot;&gt;&#10;                        &lt;Bell className=&quot;h-8 w-8 mx-auto mb-2 opacity-50&quot; /&gt;&#10;                        &lt;p className=&quot;text-sm&quot;&gt;No notifications&lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                )}&#10;&#10;                &lt;DropdownMenuSeparator /&gt;&#10;&#10;                &lt;DropdownMenuItem className=&quot;text-center justify-center&quot;&gt;&#10;                    &lt;a href=&quot;/admin/notifications&quot; className=&quot;text-sm text-primary hover:underline&quot;&gt;&#10;                        View all notifications&#10;                    &lt;/a&gt;&#10;                &lt;/DropdownMenuItem&gt;&#10;            &lt;/DropdownMenuContent&gt;&#10;        &lt;/DropdownMenu&gt;&#10;    )&#10;})&#10;&#10;NotificationBell.displayName = &quot;NotificationBell&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/ui/use-toast.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/ui/use-toast.ts" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;// Inspired by react-hot-toast library&#10;import * as React from &quot;react&quot;&#10;&#10;import type {&#10;  ToastActionElement,&#10;  ToastProps,&#10;} from &quot;@/components/ui/toast&quot;&#10;&#10;const TOAST_LIMIT = 1&#10;const TOAST_REMOVE_DELAY = 1000000&#10;&#10;type ToasterToast = ToastProps &amp; {&#10;  id: string&#10;  title?: React.ReactNode&#10;  description?: React.ReactNode&#10;  action?: ToastActionElement&#10;}&#10;&#10;const actionTypes = {&#10;  ADD_TOAST: &quot;ADD_TOAST&quot;,&#10;  UPDATE_TOAST: &quot;UPDATE_TOAST&quot;,&#10;  DISMISS_TOAST: &quot;DISMISS_TOAST&quot;,&#10;  REMOVE_TOAST: &quot;REMOVE_TOAST&quot;,&#10;} as const&#10;&#10;let count = 0&#10;&#10;function genId() {&#10;  count = (count + 1) % Number.MAX_SAFE_INTEGER&#10;  return count.toString()&#10;}&#10;&#10;type ActionType = typeof actionTypes&#10;&#10;type Action =&#10;  | {&#10;      type: ActionType[&quot;ADD_TOAST&quot;]&#10;      toast: ToasterToast&#10;    }&#10;  | {&#10;      type: ActionType[&quot;UPDATE_TOAST&quot;]&#10;      toast: Partial&lt;ToasterToast&gt;&#10;    }&#10;  | {&#10;      type: ActionType[&quot;DISMISS_TOAST&quot;]&#10;      toastId?: ToasterToast[&quot;id&quot;]&#10;    }&#10;  | {&#10;      type: ActionType[&quot;REMOVE_TOAST&quot;]&#10;      toastId?: ToasterToast[&quot;id&quot;]&#10;    }&#10;&#10;interface State {&#10;  toasts: ToasterToast[]&#10;}&#10;&#10;const toastTimeouts = new Map&lt;string, ReturnType&lt;typeof setTimeout&gt;&gt;()&#10;&#10;const addToRemoveQueue = (toastId: string) =&gt; {&#10;  if (toastTimeouts.has(toastId)) {&#10;    return&#10;  }&#10;&#10;  const timeout = setTimeout(() =&gt; {&#10;    toastTimeouts.delete(toastId)&#10;    dispatch({&#10;      type: &quot;REMOVE_TOAST&quot;,&#10;      toastId: toastId,&#10;    })&#10;  }, TOAST_REMOVE_DELAY)&#10;&#10;  toastTimeouts.set(toastId, timeout)&#10;}&#10;&#10;export const reducer = (state: State, action: Action): State =&gt; {&#10;  switch (action.type) {&#10;    case &quot;ADD_TOAST&quot;:&#10;      return {&#10;        ...state,&#10;        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),&#10;      }&#10;&#10;    case &quot;UPDATE_TOAST&quot;:&#10;      return {&#10;        ...state,&#10;        toasts: state.toasts.map((t) =&gt;&#10;          t.id === action.toast.id ? { ...t, ...action.toast } : t&#10;        ),&#10;      }&#10;&#10;    case &quot;DISMISS_TOAST&quot;: {&#10;      const { toastId } = action&#10;&#10;      // ! Side effects ! - This could be extracted into a dismissToast() action,&#10;      // but I'll keep it here for simplicity&#10;      if (toastId) {&#10;        addToRemoveQueue(toastId)&#10;      } else {&#10;        state.toasts.forEach((toast) =&gt; {&#10;          addToRemoveQueue(toast.id)&#10;        })&#10;      }&#10;&#10;      return {&#10;        ...state,&#10;        toasts: state.toasts.map((t) =&gt;&#10;          t.id === toastId || toastId === undefined&#10;            ? {&#10;                ...t,&#10;                open: false,&#10;              }&#10;            : t&#10;        ),&#10;      }&#10;    }&#10;    case &quot;REMOVE_TOAST&quot;:&#10;      if (action.toastId === undefined) {&#10;        return {&#10;          ...state,&#10;          toasts: [],&#10;        }&#10;      }&#10;      return {&#10;        ...state,&#10;        toasts: state.toasts.filter((t) =&gt; t.id !== action.toastId),&#10;      }&#10;  }&#10;}&#10;&#10;const listeners: Array&lt;(state: State) =&gt; void&gt; = []&#10;&#10;let memoryState: State = { toasts: [] }&#10;&#10;function dispatch(action: Action) {&#10;  memoryState = reducer(memoryState, action)&#10;  listeners.forEach((listener) =&gt; {&#10;    listener(memoryState)&#10;  })&#10;}&#10;&#10;type Toast = Omit&lt;ToasterToast, &quot;id&quot;&gt;&#10;&#10;function toast({ ...props }: Toast) {&#10;  const id = genId()&#10;&#10;  const update = (props: ToasterToast) =&gt;&#10;    dispatch({&#10;      type: &quot;UPDATE_TOAST&quot;,&#10;      toast: { ...props, id },&#10;    })&#10;  const dismiss = () =&gt; dispatch({ type: &quot;DISMISS_TOAST&quot;, toastId: id })&#10;&#10;  dispatch({&#10;    type: &quot;ADD_TOAST&quot;,&#10;    toast: {&#10;      ...props,&#10;      id,&#10;      open: true,&#10;      onOpenChange: (open) =&gt; {&#10;        if (!open) dismiss()&#10;      },&#10;    },&#10;  })&#10;&#10;  return {&#10;    id: id,&#10;    dismiss,&#10;    update,&#10;  }&#10;}&#10;&#10;function useToast() {&#10;  const [state, setState] = React.useState&lt;State&gt;(memoryState)&#10;&#10;  React.useEffect(() =&gt; {&#10;    listeners.push(setState)&#10;    return () =&gt; {&#10;      const index = listeners.indexOf(setState)&#10;      if (index &gt; -1) {&#10;        listeners.splice(index, 1)&#10;      }&#10;    }&#10;  }, [state])&#10;&#10;  return {&#10;    ...state,&#10;    toast,&#10;    dismiss: (toastId?: string) =&gt; dispatch({ type: &quot;DISMISS_TOAST&quot;, toastId }),&#10;  }&#10;}&#10;&#10;export { useToast, toast }&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;// Inspired by react-hot-toast library&#10;import * as React from &quot;react&quot;&#10;&#10;import type {&#10;  ToastActionElement,&#10;  ToastProps,&#10;} from &quot;@/components/ui/toast&quot;&#10;&#10;const TOAST_LIMIT = 3&#10;const TOAST_REMOVE_DELAY = 5000&#10;&#10;type ToasterToast = ToastProps &amp; {&#10;  id: string&#10;  title?: React.ReactNode&#10;  description?: React.ReactNode&#10;  action?: ToastActionElement&#10;}&#10;&#10;const actionTypes = {&#10;  ADD_TOAST: &quot;ADD_TOAST&quot;,&#10;  UPDATE_TOAST: &quot;UPDATE_TOAST&quot;,&#10;  DISMISS_TOAST: &quot;DISMISS_TOAST&quot;,&#10;  REMOVE_TOAST: &quot;REMOVE_TOAST&quot;,&#10;} as const&#10;&#10;let count = 0&#10;&#10;function genId() {&#10;  count = (count + 1) % Number.MAX_SAFE_INTEGER&#10;  return count.toString()&#10;}&#10;&#10;type ActionType = typeof actionTypes&#10;&#10;type Action =&#10;  | {&#10;      type: ActionType[&quot;ADD_TOAST&quot;]&#10;      toast: ToasterToast&#10;    }&#10;  | {&#10;      type: ActionType[&quot;UPDATE_TOAST&quot;]&#10;      toast: Partial&lt;ToasterToast&gt;&#10;    }&#10;  | {&#10;      type: ActionType[&quot;DISMISS_TOAST&quot;]&#10;      toastId?: ToasterToast[&quot;id&quot;]&#10;    }&#10;  | {&#10;      type: ActionType[&quot;REMOVE_TOAST&quot;]&#10;      toastId?: ToasterToast[&quot;id&quot;]&#10;    }&#10;&#10;interface State {&#10;  toasts: ToasterToast[]&#10;}&#10;&#10;const toastTimeouts = new Map&lt;string, ReturnType&lt;typeof setTimeout&gt;&gt;()&#10;&#10;const addToRemoveQueue = (toastId: string) =&gt; {&#10;  if (toastTimeouts.has(toastId)) {&#10;    return&#10;  }&#10;&#10;  const timeout = setTimeout(() =&gt; {&#10;    toastTimeouts.delete(toastId)&#10;    dispatch({&#10;      type: &quot;REMOVE_TOAST&quot;,&#10;      toastId: toastId,&#10;    })&#10;  }, TOAST_REMOVE_DELAY)&#10;&#10;  toastTimeouts.set(toastId, timeout)&#10;}&#10;&#10;export const reducer = (state: State, action: Action): State =&gt; {&#10;  switch (action.type) {&#10;    case &quot;ADD_TOAST&quot;:&#10;      return {&#10;        ...state,&#10;        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),&#10;      }&#10;&#10;    case &quot;UPDATE_TOAST&quot;:&#10;      return {&#10;        ...state,&#10;        toasts: state.toasts.map((t) =&gt;&#10;          t.id === action.toast.id ? { ...t, ...action.toast } : t&#10;        ),&#10;      }&#10;&#10;    case &quot;DISMISS_TOAST&quot;: {&#10;      const { toastId } = action&#10;&#10;      // ! Side effects ! - This could be extracted into a dismissToast() action,&#10;      // but I'll keep it here for simplicity&#10;      if (toastId) {&#10;        addToRemoveQueue(toastId)&#10;      } else {&#10;        state.toasts.forEach((toast) =&gt; {&#10;          addToRemoveQueue(toast.id)&#10;        })&#10;      }&#10;&#10;      return {&#10;        ...state,&#10;        toasts: state.toasts.map((t) =&gt;&#10;          t.id === toastId || toastId === undefined&#10;            ? {&#10;                ...t,&#10;                open: false,&#10;              }&#10;            : t&#10;        ),&#10;      }&#10;    }&#10;    case &quot;REMOVE_TOAST&quot;:&#10;      if (action.toastId === undefined) {&#10;        return {&#10;          ...state,&#10;          toasts: [],&#10;        }&#10;      }&#10;      return {&#10;        ...state,&#10;        toasts: state.toasts.filter((t) =&gt; t.id !== action.toastId),&#10;      }&#10;  }&#10;}&#10;&#10;const listeners: Array&lt;(state: State) =&gt; void&gt; = []&#10;&#10;let memoryState: State = { toasts: [] }&#10;&#10;function dispatch(action: Action) {&#10;  memoryState = reducer(memoryState, action)&#10;  listeners.forEach((listener) =&gt; {&#10;    listener(memoryState)&#10;  })&#10;}&#10;&#10;type Toast = Omit&lt;ToasterToast, &quot;id&quot;&gt;&#10;&#10;function toast({ ...props }: Toast) {&#10;  const id = genId()&#10;&#10;  const update = (props: ToasterToast) =&gt;&#10;    dispatch({&#10;      type: &quot;UPDATE_TOAST&quot;,&#10;      toast: { ...props, id },&#10;    })&#10;  const dismiss = () =&gt; dispatch({ type: &quot;DISMISS_TOAST&quot;, toastId: id })&#10;&#10;  dispatch({&#10;    type: &quot;ADD_TOAST&quot;,&#10;    toast: {&#10;      ...props,&#10;      id,&#10;      open: true,&#10;      onOpenChange: (open) =&gt; {&#10;        if (!open) dismiss()&#10;      },&#10;    },&#10;  })&#10;&#10;  return {&#10;    id: id,&#10;    dismiss,&#10;    update,&#10;  }&#10;}&#10;&#10;function useToast() {&#10;  const [state, setState] = React.useState&lt;State&gt;(memoryState)&#10;&#10;  React.useEffect(() =&gt; {&#10;    listeners.push(setState)&#10;    return () =&gt; {&#10;      const index = listeners.indexOf(setState)&#10;      if (index &gt; -1) {&#10;        listeners.splice(index, 1)&#10;      }&#10;    }&#10;  }, [state])&#10;&#10;  return {&#10;    ...state,&#10;    toast,&#10;    dismiss: (toastId?: string) =&gt; dispatch({ type: &quot;DISMISS_TOAST&quot;, toastId }),&#10;  }&#10;}&#10;&#10;export { useToast, toast }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/websocket.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/websocket.ts" />
              <option name="originalContent" value="import SockJS from 'sockjs-client';&#10;import { Client } from '@stomp/stompjs';&#10;import { notificationService} from &quot;@/lib/api-client&quot;;&#10;import type { Notification } from '@/types/notification';&#10;&#10;export class WebSocketService {&#10;  private client: Client;&#10;  private subscriptionCallback: ((notification: Notification) =&gt; void) | null = null;&#10;&#10;  constructor(wsUrl: string = 'http://localhost:8888/ws') {&#10;&#10;    this.client = new Client({&#10;        webSocketFactory: () =&gt; new SockJS(wsUrl),&#10;      onConnect: () =&gt; {&#10;        console.log('Connected to WebSocket');&#10;        this.subscribe();&#10;      },&#10;      onStompError: (frame) =&gt; {&#10;        console.error('STOMP error', frame);&#10;      }&#10;    });&#10;  }&#10;&#10;    async fetchInitialNotifications(order: 'asc' | 'desc' = 'asc'): Promise&lt;Notification[]&gt; {&#10;        try {&#10;            const notifications = await notificationService.getNotifications();&#10;            return notifications.sort((a: Notification, b: Notification) =&gt; {&#10;                if (order === 'asc') {&#10;                    return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();&#10;                } else {&#10;                    return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();&#10;                }&#10;            });&#10;        } catch (error) {&#10;            console.error('Failed to fetch initial notifications:', error);&#10;            // Return empty array when API is not available&#10;            return [];&#10;        }&#10;    }&#10;&#10;  connect(): void {&#10;    this.client.activate();&#10;  }&#10;&#10;  disconnect(): void {&#10;    this.client.deactivate();&#10;  }&#10;&#10;  onNotification(callback: (notification: Notification) =&gt; void): void {&#10;    this.subscriptionCallback = callback;&#10;    if (this.client.connected) {&#10;      this.subscribe();&#10;    }&#10;  }&#10;&#10;  private subscribe(): void {&#10;    if (this.subscriptionCallback) {&#10;      this.client.subscribe(`/topic/notifications`, (message) =&gt; {&#10;        const notification = JSON.parse(message.body) as Notification;&#10;        this.subscriptionCallback!(notification);&#10;      });&#10;    }&#10;  }&#10;}" />
              <option name="updatedContent" value="import SockJS from 'sockjs-client';&#10;import { Client } from '@stomp/stompjs';&#10;import { notificationService} from &quot;@/lib/api-client&quot;;&#10;import type { Notification } from '@/types/notification';&#10;&#10;export class WebSocketService {&#10;  private client: Client;&#10;  private subscriptionCallback: ((notification: Notification) =&gt; void) | null = null;&#10;  private connectCallback: (() =&gt; void) | null = null;&#10;  private disconnectCallback: (() =&gt; void) | null = null;&#10;&#10;  constructor(wsUrl: string = 'http://localhost:8888/ws') {&#10;&#10;    this.client = new Client({&#10;        webSocketFactory: () =&gt; new SockJS(wsUrl),&#10;      onConnect: () =&gt; {&#10;        console.log('Connected to WebSocket');&#10;        this.connectCallback?.();&#10;        this.subscribe();&#10;      },&#10;      onDisconnect: () =&gt; {&#10;        console.log('Disconnected from WebSocket');&#10;        this.disconnectCallback?.();&#10;      },&#10;      onStompError: (frame) =&gt; {&#10;        console.error('STOMP error', frame);&#10;        this.disconnectCallback?.();&#10;      }&#10;    });&#10;  }&#10;&#10;    async fetchInitialNotifications(order: 'asc' | 'desc' = 'asc'): Promise&lt;Notification[]&gt; {&#10;        try {&#10;            const notifications = await notificationService.getNotifications();&#10;            return notifications.sort((a: Notification, b: Notification) =&gt; {&#10;                if (order === 'asc') {&#10;                    return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();&#10;                } else {&#10;                    return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();&#10;                }&#10;            });&#10;        } catch (error) {&#10;            console.error('Failed to fetch initial notifications:', error);&#10;            // Return empty array when API is not available&#10;            return [];&#10;        }&#10;    }&#10;&#10;  connect(): void {&#10;    this.client.activate();&#10;  }&#10;&#10;  disconnect(): void {&#10;    this.client.deactivate();&#10;  }&#10;&#10;  onNotification(callback: (notification: Notification) =&gt; void): void {&#10;    this.subscriptionCallback = callback;&#10;    if (this.client.connected) {&#10;      this.subscribe();&#10;    }&#10;  }&#10;&#10;  onConnect(callback: () =&gt; void): void {&#10;    this.connectCallback = callback;&#10;  }&#10;&#10;  onDisconnect(callback: () =&gt; void): void {&#10;    this.disconnectCallback = callback;&#10;  }&#10;&#10;  private subscribe(): void {&#10;    if (this.subscriptionCallback) {&#10;      this.client.subscribe(`/topic/notifications`, (message) =&gt; {&#10;        const notification = JSON.parse(message.body) as Notification;&#10;        this.subscriptionCallback!(notification);&#10;      });&#10;    }&#10;  }&#10;&#10;  get isConnected(): boolean {&#10;    return this.client.connected;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>