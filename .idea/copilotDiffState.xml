<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/admin/notifications/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/admin/notifications/page.tsx" />
              <option name="originalContent" value="&quot;use client&quot;&#10;&#10;import {Button} from &quot;@/components/ui/button&quot;&#10;import {CheckCheck} from &quot;lucide-react&quot;&#10;import type {Notification} from &quot;@/types/notification&quot;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import {notificationService} from &quot;@/lib/api-client&quot;&#10;import {NotificationList} from &quot;@/components/Notification/NotificationList&quot;&#10;import {WebSocketService} from &quot;@/lib/websocket&quot;;&#10;&#10;export default function NotificationsPage() {&#10;    const [notifications, setNotifications] = useState&lt;Notification[]&gt;([]);&#10;    const [loading, setLoading] = useState(true);&#10;    const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;    // Helper functions for notification actions&#10;    const unreadCount = notifications.filter(n =&gt; !n.isRead).length;&#10;&#10;    const markAsRead = async (id: string, status: boolean) =&gt; {&#10;        try {&#10;            await notificationService.markAsRead(id, status);&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt;&#10;                    n.id === id ? {...n, isRead: status} : n&#10;                )&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark notification as read:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const deleteNotification = async (id: string) =&gt; {&#10;        try {&#10;            await notificationService.removeNotification(id);&#10;            setNotifications(notifications =&gt;&#10;                notifications.filter(n =&gt; n.id !== id)&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to delete notification:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const markAllAsRead = async () =&gt; {&#10;        try {&#10;            await notificationService.markAllNotificationsAsRead();&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt; ({...n, isRead: true}))&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark all notifications as read:&quot;, error);&#10;        }&#10;    };&#10;&#10;    useEffect(() =&gt; {&#10;        const wsService = new WebSocketService();&#10;&#10;        wsService.onNotification((notification) =&gt; {&#10;            setNotifications((prev) =&gt; [notification, ...prev]); // Add new notification at the top&#10;        });&#10;&#10;        wsService.connect();&#10;&#10;        // Fetch initial notifications&#10;        wsService.fetchInitialNotifications(&quot;desc&quot;).then((initialNotifications) =&gt; {&#10;            setNotifications(initialNotifications);&#10;        });&#10;&#10;        return () =&gt; {&#10;            wsService.disconnect();&#10;        };&#10;    }, [1]);&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                        &lt;h1 className=&quot;text-3xl font-bold text-foreground&quot;&gt;Notifications&lt;/h1&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {unreadCount &gt; 0 &amp;&amp; (&#10;                    &lt;Button onClick={markAllAsRead} variant=&quot;outline&quot;&gt;&#10;                        &lt;CheckCheck className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                        Mark All Read&#10;                    &lt;/Button&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;NotificationList&#10;                notifications={notifications}&#10;                actions={{&#10;                    markAsRead: markAsRead,&#10;                    remove: deleteNotification&#10;                }}&#10;            /&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;&#10;&#10;import {Button} from &quot;@/components/ui/button&quot;&#10;import {CheckCheck} from &quot;lucide-react&quot;&#10;import type {Notification} from &quot;@/types/notification&quot;&#10;import {useEffect, useState} from &quot;react&quot;;&#10;import {notificationService} from &quot;@/lib/api-client&quot;&#10;import {NotificationList} from &quot;@/components/Notification/NotificationList&quot;&#10;&#10;export default function NotificationsPage() {&#10;    const [notifications, setNotifications] = useState&lt;Notification[]&gt;([]);&#10;    const [loading, setLoading] = useState(true);&#10;&#10;    // Helper functions for notification actions&#10;    const unreadCount = notifications.filter(n =&gt; !n.isRead).length;&#10;&#10;    const markAsRead = async (id: string, status: boolean) =&gt; {&#10;        try {&#10;            await notificationService.markAsRead(id, status);&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt;&#10;                    n.id === id ? {...n, isRead: status} : n&#10;                )&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark notification as read:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const deleteNotification = async (id: string) =&gt; {&#10;        try {&#10;            await notificationService.removeNotification(id);&#10;            setNotifications(notifications =&gt;&#10;                notifications.filter(n =&gt; n.id !== id)&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to delete notification:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const markAllAsRead = async () =&gt; {&#10;        try {&#10;            await notificationService.markAllNotificationsAsRead();&#10;            setNotifications(notifications =&gt;&#10;                notifications.map(n =&gt; ({...n, isRead: true}))&#10;            );&#10;        } catch (error) {&#10;            console.error(&quot;Failed to mark all notifications as read:&quot;, error);&#10;        }&#10;    };&#10;&#10;    const fetchNotifications = async () =&gt; {&#10;        try {&#10;            setLoading(true);&#10;            const data = await notificationService.getNotifications();&#10;            // Sort notifications by timestamp (newest first)&#10;            const sortedNotifications = data.sort((a: Notification, b: Notification) =&gt; &#10;                new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()&#10;            );&#10;            setNotifications(sortedNotifications);&#10;        } catch (error) {&#10;            console.error(&quot;Failed to fetch notifications:&quot;, error);&#10;            // Set empty array to show &quot;No notifications&quot; card&#10;            setNotifications([]);&#10;        } finally {&#10;            setLoading(false);&#10;        }&#10;    };&#10;&#10;    useEffect(() =&gt; {&#10;        fetchNotifications();&#10;    }, []);&#10;&#10;    if (loading) {&#10;        return (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;                &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                    &lt;h1 className=&quot;text-3xl font-bold text-foreground&quot;&gt;Notifications&lt;/h1&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-center py-8&quot;&gt;Loading notifications...&lt;/div&gt;&#10;            &lt;/div&gt;&#10;        );&#10;    }&#10;&#10;    return (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;                &lt;div&gt;&#10;                    &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                        &lt;h1 className=&quot;text-3xl font-bold text-foreground&quot;&gt;Notifications&lt;/h1&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {unreadCount &gt; 0 &amp;&amp; (&#10;                    &lt;Button onClick={markAllAsRead} variant=&quot;outline&quot;&gt;&#10;                        &lt;CheckCheck className=&quot;mr-2 h-4 w-4&quot;/&gt;&#10;                        Mark All Read&#10;                    &lt;/Button&gt;&#10;                )}&#10;            &lt;/div&gt;&#10;&#10;            &lt;NotificationList&#10;                notifications={notifications}&#10;                actions={{&#10;                    markAsRead: markAsRead,&#10;                    remove: deleteNotification&#10;                }}&#10;            /&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/[id]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/[id]/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/[id]/status/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/[id]/status/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/notifications/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/notifications/route.ts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/Notification/NotificationItem.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/Notification/NotificationItem.tsx" />
              <option name="updatedContent" value="import { Card, CardContent } from &quot;@/components/ui/card&quot;&#10;import { Button } from &quot;@/components/ui/button&quot;&#10;import { Badge } from &quot;@/components/ui/badge&quot;&#10;import { Bell, Check, Trash2 } from &quot;lucide-react&quot;&#10;import { formatRelativeTime } from &quot;@/utils/format&quot;&#10;import type { Notification, NotificationActions } from &quot;@/types/notification&quot;&#10;&#10;const typeColors = {&#10;  info: &quot;bg-blue-50 text-blue-700 border-blue-200&quot;,&#10;  success: &quot;bg-success/10 text-success border-success/20&quot;,&#10;  warning: &quot;bg-yellow-50 text-yellow-700 border-yellow-200&quot;,&#10;  error: &quot;bg-destructive/10 text-destructive border-destructive/20&quot;,&#10;}&#10;&#10;interface NotificationItemProps {&#10;  notification: Notification&#10;  actions: NotificationActions&#10;  isFirst?: boolean&#10;}&#10;&#10;export function NotificationItem({ notification, actions, isFirst = false }: NotificationItemProps) {&#10;  return (&#10;    &lt;Card&#10;      className={`${!notification.isRead ? &quot;border-primary/50&quot; : &quot;&quot;} ${&#10;        isFirst &amp;&amp; !notification.isRead ? &quot;animate-pulse bg-primary/5&quot; : &quot;&quot;&#10;      }`}&#10;    &gt;&#10;      &lt;CardContent className=&quot;p-4&quot;&gt;&#10;        &lt;div className=&quot;flex items-start justify-between gap-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-start gap-3 flex-1&quot;&gt;&#10;            &lt;div className={`p-2 rounded-full ${!notification.isRead ? &quot;bg-primary/10&quot; : &quot;bg-muted&quot;}`}&gt;&#10;              &lt;Bell className={`h-4 w-4 ${!notification.isRead ? &quot;text-primary&quot; : &quot;text-muted-foreground&quot;}`} /&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#10;              &lt;div className=&quot;flex items-center gap-2 mb-1&quot;&gt;&#10;                &lt;h3&#10;                  className={`font-medium ${!notification.isRead ? &quot;text-foreground&quot; : &quot;text-muted-foreground&quot;}`}&#10;                &gt;&#10;                  {notification.title}&#10;                &lt;/h3&gt;&#10;                &lt;Badge variant=&quot;outline&quot; className={typeColors[notification.type]}&gt;&#10;                  {notification.type}&#10;                &lt;/Badge&gt;&#10;                {!notification.isRead &amp;&amp; &lt;div className=&quot;w-2 h-2 bg-primary rounded-full&quot; /&gt;}&#10;              &lt;/div&gt;&#10;&#10;              &lt;p className=&quot;text-sm text-muted-foreground mb-2&quot;&gt;{notification.message}&lt;/p&gt;&#10;&#10;              &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;{formatRelativeTime(notification.timestamp)}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            {!notification.isRead &amp;&amp; (&#10;              &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={() =&gt; actions.markAsRead(notification.id, true)}&gt;&#10;                &lt;Check className=&quot;h-4 w-4&quot; /&gt;&#10;              &lt;/Button&gt;&#10;            )}&#10;&#10;            &lt;Button&#10;              variant=&quot;ghost&quot;&#10;              size=&quot;sm&quot;&#10;              onClick={() =&gt; actions.remove(notification.id)}&#10;              className=&quot;text-destructive hover:text-destructive&quot;&#10;            &gt;&#10;              &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/components/Notification/NotificationList.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/components/Notification/NotificationList.tsx" />
              <option name="originalContent" value="import { NotificationItem} from &quot;@/components/Notification/NotificationItem&quot;;&#10;import type { Notification, NotificationActions} from &quot;@/types/notification&quot;;&#10;&#10;interface NotificationListProps {&#10;    notifications: Notification[]&#10;    actions: NotificationActions&#10;}&#10;&#10;export function NotificationList({ notifications, actions }: NotificationListProps) {&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            {notifications.length &gt; 0 ? (&#10;                notifications.map((notification) =&gt; (&#10;                    &lt;NotificationItem&#10;                        key={notification.id}&#10;                        notification={notification}&#10;                        actions={actions}&#10;                    /&gt;&#10;                ))&#10;            ) : (&#10;                &lt;h1 className=&quot;text-center text-gray-500 text-xl&quot;&gt;No notifications available&lt;/h1&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    )&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import { NotificationItem} from &quot;@/components/Notification/NotificationItem&quot;;&#10;import type { Notification, NotificationActions} from &quot;@/types/notification&quot;;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;&#10;import { Bell } from &quot;lucide-react&quot;&#10;&#10;interface NotificationListProps {&#10;    notifications: Notification[]&#10;    actions: NotificationActions&#10;}&#10;&#10;export function NotificationList({ notifications, actions }: NotificationListProps) {&#10;    return (&#10;        &lt;div className=&quot;space-y-4&quot;&gt;&#10;            {notifications.length &gt; 0 ? (&#10;                notifications.map((notification, index) =&gt; (&#10;                    &lt;NotificationItem&#10;                        key={notification.id}&#10;                        notification={notification}&#10;                        actions={actions}&#10;                        isFirst={index === 0}&#10;                    /&gt;&#10;                ))&#10;            ) : (&#10;                &lt;Card&gt;&#10;                    &lt;CardContent className=&quot;p-8 text-center&quot;&gt;&#10;                        &lt;Bell className=&quot;h-12 w-12 text-muted-foreground mx-auto mb-4&quot; /&gt;&#10;                        &lt;h3 className=&quot;text-lg font-medium text-foreground mb-2&quot;&gt;No notifications&lt;/h3&gt;&#10;                        &lt;p className=&quot;text-muted-foreground&quot;&gt;You're all caught up!&lt;/p&gt;&#10;                    &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;            )}&#10;        &lt;/div&gt;&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/api-client.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/api-client.ts" />
              <option name="originalContent" value="import axios from &quot;axios&quot;&#10;&#10;export const apiClient = axios.create({&#10;    baseURL: process.env.NEXT_PUBLIC_API_BASE_URL || &quot;/api&quot;,&#10;    timeout: 10000,&#10;    headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;    },&#10;})&#10;&#10;// Request interceptor&#10;apiClient.interceptors.request.use(&#10;    (config) =&gt; {&#10;        // Add auth token if available&#10;        const token = localStorage.getItem(&quot;auth_token&quot;)&#10;        if (token) {&#10;            config.headers.Authorization = `Bearer ${token}`&#10;        }&#10;        return config&#10;    },&#10;    (error) =&gt; {&#10;        return Promise.reject(error)&#10;    },&#10;)&#10;&#10;// Response interceptor&#10;apiClient.interceptors.response.use(&#10;    (response) =&gt; response,&#10;    (error) =&gt; {&#10;        if (error.response?.status === 401) {&#10;            // Handle unauthorized access&#10;            localStorage.removeItem(&quot;auth_token&quot;)&#10;            window.location.href = &quot;/login&quot;&#10;        }&#10;        return Promise.reject(error)&#10;    },&#10;)&#10;&#10;export const paymentService = {&#10;    async processPayment(paymentData: {&#10;        accountNumber: string&#10;        amount: number&#10;        currency: &quot;USD&quot; | &quot;KHR&quot;&#10;        paymentMethod: string&#10;        recipientAccountNumber: string&#10;        description?: string&#10;        reference: string&#10;        cardToken: string&#10;        paymentGateway: string&#10;    }) {&#10;        const response = await apiClient.post(&quot;/api/payments/pay&quot;, paymentData)&#10;        return response.data&#10;    },&#10;}&#10;&#10;export const accountService = {&#10;    async freezeAccount(accountNumber: string) {&#10;        const response = await apiClient.patch(`/api/accounts/${accountNumber}/freeze`)&#10;        return response.data&#10;    },&#10;&#10;    async unfreezeAccount(accountNumber: string) {&#10;        const response = await apiClient.patch(`/api/accounts/${accountNumber}/unfreeze`)&#10;        return response.data&#10;    },&#10;}&#10;&#10;export const transactionService = {&#10;    async getAllTransactions() {&#10;        const response = await apiClient.get(&quot;/api/transactions&quot;)&#10;        return response.data&#10;    },&#10;}&#10;&#10;&#10;&#10;&#10;&#10;export const notificationService = {&#10;    async getNotifications() {&#10;        const response = await apiClient.get(&quot;/api/notifications&quot;)&#10;        return response.data&#10;    },&#10;&#10;    async markAsRead(id: string, status: boolean) {&#10;        await apiClient.patch(`/api/notifications/${id}/status`, {read: status})&#10;    },&#10;&#10;    async removeNotification(id: string) {&#10;        await apiClient.delete(`/api/notifications/${id}`)&#10;    },&#10;&#10;    async markAllNotificationsAsRead() {&#10;        await apiClient.patch(`/api/notifications/mark-all-read`)&#10;    },&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import axios from &quot;axios&quot;&#10;&#10;export const apiClient = axios.create({&#10;    baseURL: process.env.NEXT_PUBLIC_API_BASE_URL || &quot;/api&quot;,&#10;    timeout: 10000,&#10;    headers: {&#10;        &quot;Content-Type&quot;: &quot;application/json&quot;,&#10;    },&#10;})&#10;&#10;// Request interceptor&#10;apiClient.interceptors.request.use(&#10;    (config) =&gt; {&#10;        // Add auth token if available (only in browser environment)&#10;        if (typeof window !== &quot;undefined&quot;) {&#10;            const token = localStorage.getItem(&quot;auth_token&quot;)&#10;            if (token) {&#10;                config.headers.Authorization = `Bearer ${token}`&#10;            }&#10;        }&#10;        return config&#10;    },&#10;    (error) =&gt; {&#10;        return Promise.reject(error)&#10;    },&#10;)&#10;&#10;// Response interceptor&#10;apiClient.interceptors.response.use(&#10;    (response) =&gt; response,&#10;    (error) =&gt; {&#10;        if (error.response?.status === 401) {&#10;            // Handle unauthorized access (only in browser environment)&#10;            if (typeof window !== &quot;undefined&quot;) {&#10;                localStorage.removeItem(&quot;auth_token&quot;)&#10;                window.location.href = &quot;/login&quot;&#10;            }&#10;        }&#10;        return Promise.reject(error)&#10;    },&#10;)&#10;&#10;export const paymentService = {&#10;    async processPayment(paymentData: {&#10;        accountNumber: string&#10;        amount: number&#10;        currency: &quot;USD&quot; | &quot;KHR&quot;&#10;        paymentMethod: string&#10;        recipientAccountNumber: string&#10;        description?: string&#10;        reference: string&#10;        cardToken: string&#10;        paymentGateway: string&#10;    }) {&#10;        const response = await apiClient.post(&quot;/api/payments/pay&quot;, paymentData)&#10;        return response.data&#10;    },&#10;}&#10;&#10;export const accountService = {&#10;    async freezeAccount(accountNumber: string) {&#10;        const response = await apiClient.patch(`/api/accounts/${accountNumber}/freeze`)&#10;        return response.data&#10;    },&#10;&#10;    async unfreezeAccount(accountNumber: string) {&#10;        const response = await apiClient.patch(`/api/accounts/${accountNumber}/unfreeze`)&#10;        return response.data&#10;    },&#10;}&#10;&#10;export const transactionService = {&#10;    async getAllTransactions() {&#10;        const response = await apiClient.get(&quot;/api/transactions&quot;)&#10;        return response.data&#10;    },&#10;}&#10;&#10;export const notificationService = {&#10;    async getNotifications() {&#10;        const response = await apiClient.get(&quot;/api/notifications&quot;)&#10;        return response.data&#10;    },&#10;&#10;    async markAsRead(id: string, status: boolean) {&#10;        await apiClient.patch(`/api/notifications/${id}/status`, {read: status})&#10;    },&#10;&#10;    async removeNotification(id: string) {&#10;        await apiClient.delete(`/api/notifications/${id}`)&#10;    },&#10;&#10;    async markAllNotificationsAsRead() {&#10;        await apiClient.patch(`/api/notifications/mark-all-read`)&#10;    },&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/lib/websocket.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/websocket.ts" />
              <option name="originalContent" value="import SockJS from 'sockjs-client';&#10;import { Client } from '@stomp/stompjs';&#10;import { notificationService} from &quot;@/lib/api-client&quot;;&#10;import type { Notification } from '@/types/notification';&#10;&#10;export class WebSocketService {&#10;  private client: Client;&#10;  private subscriptionCallback: ((notification: Notification) =&gt; void) | null = null;&#10;&#10;  constructor(wsUrl: string = 'http://localhost:8888/notifications/ws') {&#10;&#10;    this.client = new Client({&#10;        webSocketFactory: () =&gt; new SockJS(wsUrl),&#10;      onConnect: () =&gt; {&#10;        console.log('Connected to WebSocket');&#10;        this.subscribe();&#10;      },&#10;      onStompError: (frame) =&gt; {&#10;        console.error('STOMP error', frame);&#10;      }&#10;    });&#10;  }&#10;&#10;    async fetchInitialNotifications(order: 'asc' | 'desc' = 'asc'): Promise&lt;Notification[]&gt; {&#10;        const notifications = await notificationService.getNotifications();&#10;        return notifications.sort((a: Notification, b: Notification) =&gt; {&#10;            if (order === 'asc') {&#10;                return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();&#10;            } else {&#10;                return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();&#10;            }&#10;        });&#10;    }&#10;&#10;  connect(): void {&#10;    this.client.activate();&#10;  }&#10;&#10;  disconnect(): void {&#10;    this.client.deactivate();&#10;  }&#10;&#10;  onNotification(callback: (notification: Notification) =&gt; void): void {&#10;    this.subscriptionCallback = callback;&#10;    if (this.client.connected) {&#10;      this.subscribe();&#10;    }&#10;  }&#10;&#10;  private subscribe(): void {&#10;    if (this.subscriptionCallback) {&#10;      this.client.subscribe(`/topic/notifications`, (message) =&gt; {&#10;        const notification = JSON.parse(message.body) as Notification;&#10;        this.subscriptionCallback!(notification);&#10;      });&#10;    }&#10;  }&#10;}" />
              <option name="updatedContent" value="import SockJS from 'sockjs-client';&#10;import { Client } from '@stomp/stompjs';&#10;import { notificationService} from &quot;@/lib/api-client&quot;;&#10;import type { Notification } from '@/types/notification';&#10;&#10;export class WebSocketService {&#10;  private client: Client;&#10;  private subscriptionCallback: ((notification: Notification) =&gt; void) | null = null;&#10;&#10;  constructor(wsUrl: string = 'http://localhost:8888/notifications/ws') {&#10;&#10;    this.client = new Client({&#10;        webSocketFactory: () =&gt; new SockJS(wsUrl),&#10;      onConnect: () =&gt; {&#10;        console.log('Connected to WebSocket');&#10;        this.subscribe();&#10;      },&#10;      onStompError: (frame) =&gt; {&#10;        console.error('STOMP error', frame);&#10;      }&#10;    });&#10;  }&#10;&#10;    async fetchInitialNotifications(order: 'asc' | 'desc' = 'asc'): Promise&lt;Notification[]&gt; {&#10;        try {&#10;            const notifications = await notificationService.getNotifications();&#10;            return notifications.sort((a: Notification, b: Notification) =&gt; {&#10;                if (order === 'asc') {&#10;                    return new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime();&#10;                } else {&#10;                    return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();&#10;                }&#10;            });&#10;        } catch (error) {&#10;            console.error('Failed to fetch initial notifications:', error);&#10;            // Return empty array when API is not available&#10;            return [];&#10;        }&#10;    }&#10;&#10;  connect(): void {&#10;    this.client.activate();&#10;  }&#10;&#10;  disconnect(): void {&#10;    this.client.deactivate();&#10;  }&#10;&#10;  onNotification(callback: (notification: Notification) =&gt; void): void {&#10;    this.subscriptionCallback = callback;&#10;    if (this.client.connected) {&#10;      this.subscribe();&#10;    }&#10;  }&#10;&#10;  private subscribe(): void {&#10;    if (this.subscriptionCallback) {&#10;      this.client.subscribe(`/topic/notifications`, (message) =&gt; {&#10;        const notification = JSON.parse(message.body) as Notification;&#10;        this.subscriptionCallback!(notification);&#10;      });&#10;    }&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>